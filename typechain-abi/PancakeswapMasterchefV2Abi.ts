/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddPool = ContractEventLog<{
  pid: string;
  allocPoint: string;
  lpToken: string;
  isRegular: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Init = ContractEventLog<{}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetPool = ContractEventLog<{
  pid: string;
  allocPoint: string;
  0: string;
  1: string;
}>;
export type UpdateBoostContract = ContractEventLog<{
  boostContract: string;
  0: string;
}>;
export type UpdateBoostMultiplier = ContractEventLog<{
  user: string;
  pid: string;
  oldMultiplier: string;
  newMultiplier: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdateBurnAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type UpdateCakeRate = ContractEventLog<{
  burnRate: string;
  regularFarmRate: string;
  specialFarmRate: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdatePool = ContractEventLog<{
  pid: string;
  lastRewardBlock: string;
  lpSupply: string;
  accCakePerShare: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdateWhiteList = ContractEventLog<{
  user: string;
  isValid: boolean;
  0: string;
  1: boolean;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface PancakeswapMasterchefV2Abi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PancakeswapMasterchefV2Abi;
  clone(): PancakeswapMasterchefV2Abi;
  methods: {
    ACC_CAKE_PRECISION(): NonPayableTransactionObject<string>;

    BOOST_PRECISION(): NonPayableTransactionObject<string>;

    CAKE(): NonPayableTransactionObject<string>;

    CAKE_RATE_TOTAL_PRECISION(): NonPayableTransactionObject<string>;

    MASTERCHEF_CAKE_PER_BLOCK(): NonPayableTransactionObject<string>;

    MASTER_CHEF(): NonPayableTransactionObject<string>;

    MASTER_PID(): NonPayableTransactionObject<string>;

    MAX_BOOST_PRECISION(): NonPayableTransactionObject<string>;

    add(
      _allocPoint: number | string | BN,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean
    ): NonPayableTransactionObject<void>;

    boostContract(): NonPayableTransactionObject<string>;

    burnAdmin(): NonPayableTransactionObject<string>;

    burnCake(_withUpdate: boolean): NonPayableTransactionObject<void>;

    cakePerBlock(_isRegular: boolean): NonPayableTransactionObject<string>;

    cakePerBlockToBurn(): NonPayableTransactionObject<string>;

    cakeRateToBurn(): NonPayableTransactionObject<string>;

    cakeRateToRegularFarm(): NonPayableTransactionObject<string>;

    cakeRateToSpecialFarm(): NonPayableTransactionObject<string>;

    deposit(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    emergencyWithdraw(
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    getBoostMultiplier(
      _user: string,
      _pid: number | string | BN
    ): NonPayableTransactionObject<string>;

    harvestFromMasterChef(): NonPayableTransactionObject<void>;

    init(dummyToken: string): NonPayableTransactionObject<void>;

    lastBurnedBlock(): NonPayableTransactionObject<string>;

    lpToken(arg0: number | string | BN): NonPayableTransactionObject<string>;

    massUpdatePools(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pendingCake(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      accCakePerShare: string;
      lastRewardBlock: string;
      allocPoint: string;
      totalBoostedShare: string;
      isRegular: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    set(
      _pid: number | string | BN,
      _allocPoint: number | string | BN,
      _withUpdate: boolean
    ): NonPayableTransactionObject<void>;

    totalRegularAllocPoint(): NonPayableTransactionObject<string>;

    totalSpecialAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateBoostContract(
      _newBoostContract: string
    ): NonPayableTransactionObject<void>;

    updateBoostMultiplier(
      _user: string,
      _pid: number | string | BN,
      _newMultiplier: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateBurnAdmin(_newAdmin: string): NonPayableTransactionObject<void>;

    updateCakeRate(
      _burnRate: number | string | BN,
      _regularFarmRate: number | string | BN,
      _specialFarmRate: number | string | BN,
      _withUpdate: boolean
    ): NonPayableTransactionObject<void>;

    updatePool(
      _pid: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string, boolean]>;

    updateWhiteList(
      _user: string,
      _isValid: boolean
    ): NonPayableTransactionObject<void>;

    userInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      boostMultiplier: string;
      0: string;
      1: string;
      2: string;
    }>;

    whiteList(arg0: string): NonPayableTransactionObject<boolean>;

    withdraw(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AddPool(cb?: Callback<AddPool>): EventEmitter;
    AddPool(options?: EventOptions, cb?: Callback<AddPool>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    Init(cb?: Callback<Init>): EventEmitter;
    Init(options?: EventOptions, cb?: Callback<Init>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SetPool(cb?: Callback<SetPool>): EventEmitter;
    SetPool(options?: EventOptions, cb?: Callback<SetPool>): EventEmitter;

    UpdateBoostContract(cb?: Callback<UpdateBoostContract>): EventEmitter;
    UpdateBoostContract(
      options?: EventOptions,
      cb?: Callback<UpdateBoostContract>
    ): EventEmitter;

    UpdateBoostMultiplier(cb?: Callback<UpdateBoostMultiplier>): EventEmitter;
    UpdateBoostMultiplier(
      options?: EventOptions,
      cb?: Callback<UpdateBoostMultiplier>
    ): EventEmitter;

    UpdateBurnAdmin(cb?: Callback<UpdateBurnAdmin>): EventEmitter;
    UpdateBurnAdmin(
      options?: EventOptions,
      cb?: Callback<UpdateBurnAdmin>
    ): EventEmitter;

    UpdateCakeRate(cb?: Callback<UpdateCakeRate>): EventEmitter;
    UpdateCakeRate(
      options?: EventOptions,
      cb?: Callback<UpdateCakeRate>
    ): EventEmitter;

    UpdatePool(cb?: Callback<UpdatePool>): EventEmitter;
    UpdatePool(options?: EventOptions, cb?: Callback<UpdatePool>): EventEmitter;

    UpdateWhiteList(cb?: Callback<UpdateWhiteList>): EventEmitter;
    UpdateWhiteList(
      options?: EventOptions,
      cb?: Callback<UpdateWhiteList>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddPool", cb: Callback<AddPool>): void;
  once(event: "AddPool", options: EventOptions, cb: Callback<AddPool>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "Init", cb: Callback<Init>): void;
  once(event: "Init", options: EventOptions, cb: Callback<Init>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SetPool", cb: Callback<SetPool>): void;
  once(event: "SetPool", options: EventOptions, cb: Callback<SetPool>): void;

  once(event: "UpdateBoostContract", cb: Callback<UpdateBoostContract>): void;
  once(
    event: "UpdateBoostContract",
    options: EventOptions,
    cb: Callback<UpdateBoostContract>
  ): void;

  once(
    event: "UpdateBoostMultiplier",
    cb: Callback<UpdateBoostMultiplier>
  ): void;
  once(
    event: "UpdateBoostMultiplier",
    options: EventOptions,
    cb: Callback<UpdateBoostMultiplier>
  ): void;

  once(event: "UpdateBurnAdmin", cb: Callback<UpdateBurnAdmin>): void;
  once(
    event: "UpdateBurnAdmin",
    options: EventOptions,
    cb: Callback<UpdateBurnAdmin>
  ): void;

  once(event: "UpdateCakeRate", cb: Callback<UpdateCakeRate>): void;
  once(
    event: "UpdateCakeRate",
    options: EventOptions,
    cb: Callback<UpdateCakeRate>
  ): void;

  once(event: "UpdatePool", cb: Callback<UpdatePool>): void;
  once(
    event: "UpdatePool",
    options: EventOptions,
    cb: Callback<UpdatePool>
  ): void;

  once(event: "UpdateWhiteList", cb: Callback<UpdateWhiteList>): void;
  once(
    event: "UpdateWhiteList",
    options: EventOptions,
    cb: Callback<UpdateWhiteList>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
