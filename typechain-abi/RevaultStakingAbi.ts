/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CompoundingEnabled = ContractEventLog<{
  user: string;
  pid: string;
  enabled: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EarlyWithdrawal = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  withdrawalFee: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EmergencyWithdrawEarly = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  withdrawalFee: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PoolAdded = ContractEventLog<{
  allocPoint: string;
  vRevaMultiplier: string;
  timeLocked: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetEarlyWithdrawalFee = ContractEventLog<{
  earlyWithdrawalFee: string;
  0: string;
}>;
export type SetPool = ContractEventLog<{
  pid: string;
  allocPoint: string;
  0: string;
  1: string;
}>;
export type SetRevaAutoCompoundPool = ContractEventLog<{
  _revaAutoCompoundPool: string;
  0: string;
}>;
export type SetRevaPerBlock = ContractEventLog<{
  revaPerBlock: string;
  0: string;
}>;
export type VRevaBurned = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type VRevaMinted = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RevaultStakingAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RevaultStakingAbi;
  clone(): RevaultStakingAbi;
  methods: {
    EARLY_WITHDRAWAL_FEE_PRECISION(): NonPayableTransactionObject<string>;

    MAX_EARLY_WITHDRAWAL_FEE(): NonPayableTransactionObject<string>;

    accRevaFromFees(): NonPayableTransactionObject<string>;

    accWithdrawnRevaFromFees(): NonPayableTransactionObject<string>;

    add(
      _allocPoint: number | string | BN,
      _vRevaMultiplier: number | string | BN,
      _timeLocked: number | string | BN
    ): NonPayableTransactionObject<void>;

    deposit(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositToCompoundingPosition(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    earlyWithdrawalFee(): NonPayableTransactionObject<string>;

    emergencyWithdraw(
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    emergencyWithdrawEarly(
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    enterCompoundingPosition(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<void>;

    exitCompoundingPosition(
      _pid: number | string | BN,
      _amount: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<void>;

    initialize(
      _revaToken: string,
      _vRevaToken: string,
      _revaFeeReceiver: string,
      _revaPerBlock: number | string | BN,
      _startBlock: number | string | BN,
      _earlyWithdrawalFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    lastUpdatedRevaFeesBlock(): NonPayableTransactionObject<string>;

    massUpdatePools(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pendingReva(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      totalSupply: string;
      allocPoint: string;
      vRevaMultiplier: string;
      timeLocked: string;
      lastRewardBlock: string;
      accRevaPerShare: string;
      accRevaPerShareFromFees: string;
      lastAccRevaFromFees: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    revaAutoCompoundPool(): NonPayableTransactionObject<string>;

    revaFeeReceiver(): NonPayableTransactionObject<string>;

    revaPerBlock(): NonPayableTransactionObject<string>;

    revaToken(): NonPayableTransactionObject<string>;

    set(
      _pid: number | string | BN,
      _allocPoint: number | string | BN
    ): NonPayableTransactionObject<void>;

    setEarlyWithdrawalFee(
      _earlyWithdrawalFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRevaAutoCompoundPool(
      _revaAutoCompoundPool: string
    ): NonPayableTransactionObject<void>;

    setRevaPerBlock(
      _revaPerBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    startBlock(): NonPayableTransactionObject<string>;

    totalAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updatePool(_pid: number | string | BN): NonPayableTransactionObject<void>;

    userIsCompounding(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<boolean>;

    userPoolInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      rewardFeeDebt: string;
      timeDeposited: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    vRevaToken(): NonPayableTransactionObject<string>;

    withdraw(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawEarly(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CompoundingEnabled(cb?: Callback<CompoundingEnabled>): EventEmitter;
    CompoundingEnabled(
      options?: EventOptions,
      cb?: Callback<CompoundingEnabled>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EarlyWithdrawal(cb?: Callback<EarlyWithdrawal>): EventEmitter;
    EarlyWithdrawal(
      options?: EventOptions,
      cb?: Callback<EarlyWithdrawal>
    ): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    EmergencyWithdrawEarly(cb?: Callback<EmergencyWithdrawEarly>): EventEmitter;
    EmergencyWithdrawEarly(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdrawEarly>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PoolAdded(cb?: Callback<PoolAdded>): EventEmitter;
    PoolAdded(options?: EventOptions, cb?: Callback<PoolAdded>): EventEmitter;

    SetEarlyWithdrawalFee(cb?: Callback<SetEarlyWithdrawalFee>): EventEmitter;
    SetEarlyWithdrawalFee(
      options?: EventOptions,
      cb?: Callback<SetEarlyWithdrawalFee>
    ): EventEmitter;

    SetPool(cb?: Callback<SetPool>): EventEmitter;
    SetPool(options?: EventOptions, cb?: Callback<SetPool>): EventEmitter;

    SetRevaAutoCompoundPool(
      cb?: Callback<SetRevaAutoCompoundPool>
    ): EventEmitter;
    SetRevaAutoCompoundPool(
      options?: EventOptions,
      cb?: Callback<SetRevaAutoCompoundPool>
    ): EventEmitter;

    SetRevaPerBlock(cb?: Callback<SetRevaPerBlock>): EventEmitter;
    SetRevaPerBlock(
      options?: EventOptions,
      cb?: Callback<SetRevaPerBlock>
    ): EventEmitter;

    VRevaBurned(cb?: Callback<VRevaBurned>): EventEmitter;
    VRevaBurned(
      options?: EventOptions,
      cb?: Callback<VRevaBurned>
    ): EventEmitter;

    VRevaMinted(cb?: Callback<VRevaMinted>): EventEmitter;
    VRevaMinted(
      options?: EventOptions,
      cb?: Callback<VRevaMinted>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CompoundingEnabled", cb: Callback<CompoundingEnabled>): void;
  once(
    event: "CompoundingEnabled",
    options: EventOptions,
    cb: Callback<CompoundingEnabled>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EarlyWithdrawal", cb: Callback<EarlyWithdrawal>): void;
  once(
    event: "EarlyWithdrawal",
    options: EventOptions,
    cb: Callback<EarlyWithdrawal>
  ): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(
    event: "EmergencyWithdrawEarly",
    cb: Callback<EmergencyWithdrawEarly>
  ): void;
  once(
    event: "EmergencyWithdrawEarly",
    options: EventOptions,
    cb: Callback<EmergencyWithdrawEarly>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PoolAdded", cb: Callback<PoolAdded>): void;
  once(
    event: "PoolAdded",
    options: EventOptions,
    cb: Callback<PoolAdded>
  ): void;

  once(
    event: "SetEarlyWithdrawalFee",
    cb: Callback<SetEarlyWithdrawalFee>
  ): void;
  once(
    event: "SetEarlyWithdrawalFee",
    options: EventOptions,
    cb: Callback<SetEarlyWithdrawalFee>
  ): void;

  once(event: "SetPool", cb: Callback<SetPool>): void;
  once(event: "SetPool", options: EventOptions, cb: Callback<SetPool>): void;

  once(
    event: "SetRevaAutoCompoundPool",
    cb: Callback<SetRevaAutoCompoundPool>
  ): void;
  once(
    event: "SetRevaAutoCompoundPool",
    options: EventOptions,
    cb: Callback<SetRevaAutoCompoundPool>
  ): void;

  once(event: "SetRevaPerBlock", cb: Callback<SetRevaPerBlock>): void;
  once(
    event: "SetRevaPerBlock",
    options: EventOptions,
    cb: Callback<SetRevaPerBlock>
  ): void;

  once(event: "VRevaBurned", cb: Callback<VRevaBurned>): void;
  once(
    event: "VRevaBurned",
    options: EventOptions,
    cb: Callback<VRevaBurned>
  ): void;

  once(event: "VRevaMinted", cb: Callback<VRevaMinted>): void;
  once(
    event: "VRevaMinted",
    options: EventOptions,
    cb: Callback<VRevaMinted>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
