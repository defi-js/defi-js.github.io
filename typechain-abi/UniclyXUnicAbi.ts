/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Dev = ContractEventLog<{
  devaddr: string;
  0: string;
}>;
export type DoHardWork = ContractEventLog<{
  numberOfUpdatedPools: string;
  0: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type UpdatePool = ContractEventLog<{
  pid: string;
  0: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface UniclyXUnicAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): UniclyXUnicAbi;
  clone(): UniclyXUnicAbi;
  methods: {
    UNIC(): NonPayableTransactionObject<string>;

    UNIC_MASTERCHEF(): NonPayableTransactionObject<string>;

    XUNIC(): NonPayableTransactionObject<string>;

    deposit(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositFor(
      _pid: number | string | BN,
      _amount: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<void>;

    dev(_devaddr: string): NonPayableTransactionObject<void>;

    devFeeDenominator(): NonPayableTransactionObject<string>;

    devaddr(): NonPayableTransactionObject<string>;

    doHardWork(): NonPayableTransactionObject<void>;

    emergencyWithdraw(
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    getxUNICRate(): NonPayableTransactionObject<string>;

    haveApprovedToken(arg0: string): NonPayableTransactionObject<boolean>;

    initialize(_devaddr: string): NonPayableTransactionObject<void>;

    minBlocksToUpdatePoolInDoHardWork(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingxUNICs(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      totalLPTokens: string;
      accXUNICPerShare: string;
      0: string;
      1: string;
    }>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updatePool(_pid: number | string | BN): NonPayableTransactionObject<void>;

    userInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    withdraw(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawToken(
      tokenToWithdraw: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Dev(cb?: Callback<Dev>): EventEmitter;
    Dev(options?: EventOptions, cb?: Callback<Dev>): EventEmitter;

    DoHardWork(cb?: Callback<DoHardWork>): EventEmitter;
    DoHardWork(options?: EventOptions, cb?: Callback<DoHardWork>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    UpdatePool(cb?: Callback<UpdatePool>): EventEmitter;
    UpdatePool(options?: EventOptions, cb?: Callback<UpdatePool>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Dev", cb: Callback<Dev>): void;
  once(event: "Dev", options: EventOptions, cb: Callback<Dev>): void;

  once(event: "DoHardWork", cb: Callback<DoHardWork>): void;
  once(
    event: "DoHardWork",
    options: EventOptions,
    cb: Callback<DoHardWork>
  ): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "UpdatePool", cb: Callback<UpdatePool>): void;
  once(
    event: "UpdatePool",
    options: EventOptions,
    cb: Callback<UpdatePool>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
