/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Add = ContractEventLog<{
  pid: string;
  allocPoint: string;
  lpToken: string;
  rewarder: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Harvest = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Set = ContractEventLog<{
  pid: string;
  allocPoint: string;
  rewarder: string;
  overwrite: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type SetDevAddress = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type UpdateEmissionRate = ContractEventLog<{
  user: string;
  _joePerSec: string;
  0: string;
  1: string;
}>;
export type UpdatePool = ContractEventLog<{
  pid: string;
  lastRewardTimestamp: string;
  lpSupply: string;
  accJoePerShare: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface TraderJoeFarmAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TraderJoeFarmAbi;
  clone(): TraderJoeFarmAbi;
  methods: {
    add(
      _allocPoint: number | string | BN,
      _lpToken: string,
      _rewarder: string
    ): NonPayableTransactionObject<void>;

    deposit(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    dev(_devAddr: string): NonPayableTransactionObject<void>;

    devAddr(): NonPayableTransactionObject<string>;

    devPercent(): NonPayableTransactionObject<string>;

    emergencyWithdraw(
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    investorAddr(): NonPayableTransactionObject<string>;

    investorPercent(): NonPayableTransactionObject<string>;

    joe(): NonPayableTransactionObject<string>;

    joePerSec(): NonPayableTransactionObject<string>;

    massUpdatePools(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pendingTokens(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<{
      pendingJoe: string;
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      pendingBonusToken: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      lpToken: string;
      allocPoint: string;
      lastRewardTimestamp: string;
      accJoePerShare: string;
      rewarder: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewarderBonusTokenInfo(
      _pid: number | string | BN
    ): NonPayableTransactionObject<{
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      0: string;
      1: string;
    }>;

    set(
      _pid: number | string | BN,
      _allocPoint: number | string | BN,
      _rewarder: string,
      overwrite: boolean
    ): NonPayableTransactionObject<void>;

    setDevPercent(
      _newDevPercent: number | string | BN
    ): NonPayableTransactionObject<void>;

    setInvestorAddr(_investorAddr: string): NonPayableTransactionObject<void>;

    setInvestorPercent(
      _newInvestorPercent: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTreasuryAddr(_treasuryAddr: string): NonPayableTransactionObject<void>;

    setTreasuryPercent(
      _newTreasuryPercent: number | string | BN
    ): NonPayableTransactionObject<void>;

    startTimestamp(): NonPayableTransactionObject<string>;

    totalAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    treasuryAddr(): NonPayableTransactionObject<string>;

    treasuryPercent(): NonPayableTransactionObject<string>;

    updateEmissionRate(
      _joePerSec: number | string | BN
    ): NonPayableTransactionObject<void>;

    updatePool(_pid: number | string | BN): NonPayableTransactionObject<void>;

    userInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    withdraw(
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Add(cb?: Callback<Add>): EventEmitter;
    Add(options?: EventOptions, cb?: Callback<Add>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Set(cb?: Callback<Set>): EventEmitter;
    Set(options?: EventOptions, cb?: Callback<Set>): EventEmitter;

    SetDevAddress(cb?: Callback<SetDevAddress>): EventEmitter;
    SetDevAddress(
      options?: EventOptions,
      cb?: Callback<SetDevAddress>
    ): EventEmitter;

    UpdateEmissionRate(cb?: Callback<UpdateEmissionRate>): EventEmitter;
    UpdateEmissionRate(
      options?: EventOptions,
      cb?: Callback<UpdateEmissionRate>
    ): EventEmitter;

    UpdatePool(cb?: Callback<UpdatePool>): EventEmitter;
    UpdatePool(options?: EventOptions, cb?: Callback<UpdatePool>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Add", cb: Callback<Add>): void;
  once(event: "Add", options: EventOptions, cb: Callback<Add>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Set", cb: Callback<Set>): void;
  once(event: "Set", options: EventOptions, cb: Callback<Set>): void;

  once(event: "SetDevAddress", cb: Callback<SetDevAddress>): void;
  once(
    event: "SetDevAddress",
    options: EventOptions,
    cb: Callback<SetDevAddress>
  ): void;

  once(event: "UpdateEmissionRate", cb: Callback<UpdateEmissionRate>): void;
  once(
    event: "UpdateEmissionRate",
    options: EventOptions,
    cb: Callback<UpdateEmissionRate>
  ): void;

  once(event: "UpdatePool", cb: Callback<UpdatePool>): void;
  once(
    event: "UpdatePool",
    options: EventOptions,
    cb: Callback<UpdatePool>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
