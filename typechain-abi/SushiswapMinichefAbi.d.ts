/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Harvest = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogPoolAddition = ContractEventLog<{
  pid: string;
  allocPoint: string;
  lpToken: string;
  rewarder: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type LogSetPool = ContractEventLog<{
  pid: string;
  allocPoint: string;
  rewarder: string;
  overwrite: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type LogSushiPerSecond = ContractEventLog<{
  sushiPerSecond: string;
  0: string;
}>;
export type LogUpdatePool = ContractEventLog<{
  pid: string;
  lastRewardTime: string;
  lpSupply: string;
  accSushiPerShare: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface SushiswapMinichefAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SushiswapMinichefAbi;
  clone(): SushiswapMinichefAbi;
  methods: {
    SUSHI(): NonPayableTransactionObject<string>;

    add(
      allocPoint: number | string | BN,
      _lpToken: string,
      _rewarder: string
    ): NonPayableTransactionObject<void>;

    batch(
      calls: (string | number[])[],
      revertOnFail: boolean
    ): PayableTransactionObject<{
      successes: boolean[];
      results: string[];
      0: boolean[];
      1: string[];
    }>;

    claimOwnership(): NonPayableTransactionObject<void>;

    deposit(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    emergencyWithdraw(
      pid: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    harvest(
      pid: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    lpToken(arg0: number | string | BN): NonPayableTransactionObject<string>;

    massUpdatePools(
      pids: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    migrate(_pid: number | string | BN): NonPayableTransactionObject<void>;

    migrator(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingOwner(): NonPayableTransactionObject<string>;

    pendingSushi(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      accSushiPerShare: string;
      lastRewardTime: string;
      allocPoint: string;
      0: string;
      1: string;
      2: string;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    rewarder(arg0: number | string | BN): NonPayableTransactionObject<string>;

    set(
      _pid: number | string | BN,
      _allocPoint: number | string | BN,
      _rewarder: string,
      overwrite: boolean
    ): NonPayableTransactionObject<void>;

    setMigrator(_migrator: string): NonPayableTransactionObject<void>;

    setSushiPerSecond(
      _sushiPerSecond: number | string | BN
    ): NonPayableTransactionObject<void>;

    sushiPerSecond(): NonPayableTransactionObject<string>;

    totalAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean
    ): NonPayableTransactionObject<void>;

    updatePool(
      pid: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    userInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    withdraw(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    withdrawAndHarvest(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    LogPoolAddition(cb?: Callback<LogPoolAddition>): EventEmitter;
    LogPoolAddition(
      options?: EventOptions,
      cb?: Callback<LogPoolAddition>
    ): EventEmitter;

    LogSetPool(cb?: Callback<LogSetPool>): EventEmitter;
    LogSetPool(options?: EventOptions, cb?: Callback<LogSetPool>): EventEmitter;

    LogSushiPerSecond(cb?: Callback<LogSushiPerSecond>): EventEmitter;
    LogSushiPerSecond(
      options?: EventOptions,
      cb?: Callback<LogSushiPerSecond>
    ): EventEmitter;

    LogUpdatePool(cb?: Callback<LogUpdatePool>): EventEmitter;
    LogUpdatePool(
      options?: EventOptions,
      cb?: Callback<LogUpdatePool>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "LogPoolAddition", cb: Callback<LogPoolAddition>): void;
  once(
    event: "LogPoolAddition",
    options: EventOptions,
    cb: Callback<LogPoolAddition>
  ): void;

  once(event: "LogSetPool", cb: Callback<LogSetPool>): void;
  once(
    event: "LogSetPool",
    options: EventOptions,
    cb: Callback<LogSetPool>
  ): void;

  once(event: "LogSushiPerSecond", cb: Callback<LogSushiPerSecond>): void;
  once(
    event: "LogSushiPerSecond",
    options: EventOptions,
    cb: Callback<LogSushiPerSecond>
  ): void;

  once(event: "LogUpdatePool", cb: Callback<LogUpdatePool>): void;
  once(
    event: "LogUpdatePool",
    options: EventOptions,
    cb: Callback<LogUpdatePool>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
