/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdapterBorrowed = ContractEventLog<{
  _adapter: string;
  _token: string;
  _amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type AdapterLimitChanged = ContractEventLog<{
  _adapter: string;
  _from: string;
  _to: string;
  0: string;
  1: string;
  2: string;
}>;
export type AdapterRepaid = ContractEventLog<{
  _adapter: string;
  _token: string;
  _amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Borrowed = ContractEventLog<{
  _borrower: string;
  _token: string;
  _amount: string;
  _fee: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Deposited = ContractEventLog<{
  _depositor: string;
  _token: string;
  _amount: string;
  _mintAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type EtherReceived = ContractEventLog<{
  _from: string;
  _amount: string;
  0: string;
  1: string;
}>;
export type OperatorAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type OperatorRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Withdrew = ContractEventLog<{
  _reciever: string;
  _withdrawer: string;
  _token: string;
  _amount: string;
  _burnAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface RookLiquidityPoolAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RookLiquidityPoolAbi;
  clone(): RookLiquidityPoolAbi;
  methods: {
    BIPS_BASE(): NonPayableTransactionObject<string>;

    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    ETHEREUM(): NonPayableTransactionObject<string>;

    OPERATOR_ROLE(): NonPayableTransactionObject<string>;

    adapterBorrow(
      _token: string,
      _amount: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    adapterLimits(arg0: string): NonPayableTransactionObject<string>;

    adapterLoanedAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    adapterRepay(
      _adapter: string,
      _token: string,
      _amount: number | string | BN
    ): PayableTransactionObject<void>;

    addOperator(account: string): NonPayableTransactionObject<void>;

    blacklistRecoverableToken(
      _token: string
    ): NonPayableTransactionObject<void>;

    borrow(
      _token: string,
      _amount: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    borrowableBalance(_token: string): NonPayableTransactionObject<string>;

    borrower(): NonPayableTransactionObject<string>;

    deposit(
      _token: string,
      _amount: number | string | BN
    ): PayableTransactionObject<string>;

    depositFeeInBips(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    isOperator(account: string): NonPayableTransactionObject<boolean>;

    kToken(_token: string): NonPayableTransactionObject<string>;

    kTokens(arg0: string): NonPayableTransactionObject<string>;

    loanedAmount(arg0: string): NonPayableTransactionObject<string>;

    migrate(_newLP: string): NonPayableTransactionObject<void>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    poolFeeInBips(): NonPayableTransactionObject<string>;

    recoverTokens(_token: string): NonPayableTransactionObject<void>;

    register(_kToken: string): NonPayableTransactionObject<void>;

    registeredKTokens(arg0: string): NonPayableTransactionObject<boolean>;

    registeredTokens(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    renounceOperator(): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    totalValueLocked(_token: string): NonPayableTransactionObject<string>;

    underlyingBalance(
      _token: string,
      _owner: string
    ): NonPayableTransactionObject<string>;

    unpause(): NonPayableTransactionObject<void>;

    updateAdapterLimit(
      _adapter: string,
      _limitInBips: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateDepositFee(
      _depositFeeInBips: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateFeePool(_newFeePool: string): NonPayableTransactionObject<void>;

    updatePoolFee(
      _poolFeeInBips: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(
      _to: string,
      _kToken: string,
      _kTokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AdapterBorrowed(cb?: Callback<AdapterBorrowed>): EventEmitter;
    AdapterBorrowed(
      options?: EventOptions,
      cb?: Callback<AdapterBorrowed>
    ): EventEmitter;

    AdapterLimitChanged(cb?: Callback<AdapterLimitChanged>): EventEmitter;
    AdapterLimitChanged(
      options?: EventOptions,
      cb?: Callback<AdapterLimitChanged>
    ): EventEmitter;

    AdapterRepaid(cb?: Callback<AdapterRepaid>): EventEmitter;
    AdapterRepaid(
      options?: EventOptions,
      cb?: Callback<AdapterRepaid>
    ): EventEmitter;

    Borrowed(cb?: Callback<Borrowed>): EventEmitter;
    Borrowed(options?: EventOptions, cb?: Callback<Borrowed>): EventEmitter;

    Deposited(cb?: Callback<Deposited>): EventEmitter;
    Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter;

    EtherReceived(cb?: Callback<EtherReceived>): EventEmitter;
    EtherReceived(
      options?: EventOptions,
      cb?: Callback<EtherReceived>
    ): EventEmitter;

    OperatorAdded(cb?: Callback<OperatorAdded>): EventEmitter;
    OperatorAdded(
      options?: EventOptions,
      cb?: Callback<OperatorAdded>
    ): EventEmitter;

    OperatorRemoved(cb?: Callback<OperatorRemoved>): EventEmitter;
    OperatorRemoved(
      options?: EventOptions,
      cb?: Callback<OperatorRemoved>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    Withdrew(cb?: Callback<Withdrew>): EventEmitter;
    Withdrew(options?: EventOptions, cb?: Callback<Withdrew>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdapterBorrowed", cb: Callback<AdapterBorrowed>): void;
  once(
    event: "AdapterBorrowed",
    options: EventOptions,
    cb: Callback<AdapterBorrowed>
  ): void;

  once(event: "AdapterLimitChanged", cb: Callback<AdapterLimitChanged>): void;
  once(
    event: "AdapterLimitChanged",
    options: EventOptions,
    cb: Callback<AdapterLimitChanged>
  ): void;

  once(event: "AdapterRepaid", cb: Callback<AdapterRepaid>): void;
  once(
    event: "AdapterRepaid",
    options: EventOptions,
    cb: Callback<AdapterRepaid>
  ): void;

  once(event: "Borrowed", cb: Callback<Borrowed>): void;
  once(event: "Borrowed", options: EventOptions, cb: Callback<Borrowed>): void;

  once(event: "Deposited", cb: Callback<Deposited>): void;
  once(
    event: "Deposited",
    options: EventOptions,
    cb: Callback<Deposited>
  ): void;

  once(event: "EtherReceived", cb: Callback<EtherReceived>): void;
  once(
    event: "EtherReceived",
    options: EventOptions,
    cb: Callback<EtherReceived>
  ): void;

  once(event: "OperatorAdded", cb: Callback<OperatorAdded>): void;
  once(
    event: "OperatorAdded",
    options: EventOptions,
    cb: Callback<OperatorAdded>
  ): void;

  once(event: "OperatorRemoved", cb: Callback<OperatorRemoved>): void;
  once(
    event: "OperatorRemoved",
    options: EventOptions,
    cb: Callback<OperatorRemoved>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "Withdrew", cb: Callback<Withdrew>): void;
  once(event: "Withdrew", options: EventOptions, cb: Callback<Withdrew>): void;
}
