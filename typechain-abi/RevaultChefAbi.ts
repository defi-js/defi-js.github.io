/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NotifyDeposited = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type NotifyWithdrawn = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RevaRewardPaid = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetAdmin = ContractEventLog<{
  admin: string;
  0: string;
}>;
export type SetRevaPerBlock = ContractEventLog<{
  revaPerBlock: string;
  0: string;
}>;
export type SetRevaTreasuryPerBlock = ContractEventLog<{
  revaTreasuryPerBlock: string;
  0: string;
}>;
export type SetRevault = ContractEventLog<{
  revaultAddress: string;
  0: string;
}>;
export type SetTreasury = ContractEventLog<{
  treasury: string;
  0: string;
}>;
export type TokenAdded = ContractEventLog<{
  token: string;
  0: string;
}>;
export type TokenRewardsDisabled = ContractEventLog<{
  token: string;
  0: string;
}>;
export type TokenRewardsEnabled = ContractEventLog<{
  token: string;
  0: string;
}>;
export type TreasuryRewardClaimed = ContractEventLog<{
  amount: string;
  0: string;
}>;

export interface RevaultChefAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RevaultChefAbi;
  clone(): RevaultChefAbi;
  methods: {
    admin(): NonPayableTransactionObject<string>;

    claim(token: string): NonPayableTransactionObject<void>;

    claimFor(token: string, to: string): NonPayableTransactionObject<void>;

    claimTreasuryReward(): NonPayableTransactionObject<void>;

    disableTokenRewards(
      tokenIdx: number | string | BN
    ): NonPayableTransactionObject<void>;

    enableTokenRewards(
      tokenIdx: number | string | BN
    ): NonPayableTransactionObject<void>;

    getSupportedTokensCount(): NonPayableTransactionObject<string>;

    initialize(
      _reva: string,
      _zap: string,
      _revaPerBlock: number | string | BN,
      _revaTreasuryPerBlock: number | string | BN,
      _treasury: string,
      _startBlock: number | string | BN,
      _admin: string
    ): NonPayableTransactionObject<void>;

    lastTreasuryRewardBlock(): NonPayableTransactionObject<string>;

    notifyDeposited(
      user: string,
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    notifyWithdrawn(
      user: string,
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pendingReva(
      _tokenAddress: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    reva(): NonPayableTransactionObject<string>;

    revaPerBlock(): NonPayableTransactionObject<string>;

    revaTreasuryPerBlock(): NonPayableTransactionObject<string>;

    revaultAddress(): NonPayableTransactionObject<string>;

    revaultUsers(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<{
      balance: string;
      pending: string;
      rewardPaid: string;
      0: string;
      1: string;
      2: string;
    }>;

    setAdmin(_admin: string): NonPayableTransactionObject<void>;

    setRevaPerBlock(
      _revaPerBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRevaTreasuryPerBlock(
      _revaTreasuryPerBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRevault(_revaultAddress: string): NonPayableTransactionObject<void>;

    setTreasury(_treasury: string): NonPayableTransactionObject<void>;

    startBlock(): NonPayableTransactionObject<string>;

    supportedTokens(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokens(arg0: string): NonPayableTransactionObject<{
      totalPrincipal: string;
      tvlBusd: string;
      lastRewardBlock: string;
      accRevaPerToken: string;
      rewardsEnabled: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    totalRevaultTvlBusd(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    treasury(): NonPayableTransactionObject<string>;

    updateAllRevaultRewards(): NonPayableTransactionObject<void>;

    updateAllTvls(): NonPayableTransactionObject<void>;

    updateRevaultRewards(
      tokenIdx: number | string | BN
    ): NonPayableTransactionObject<void>;

    zap(): NonPayableTransactionObject<string>;
  };
  events: {
    NotifyDeposited(cb?: Callback<NotifyDeposited>): EventEmitter;
    NotifyDeposited(
      options?: EventOptions,
      cb?: Callback<NotifyDeposited>
    ): EventEmitter;

    NotifyWithdrawn(cb?: Callback<NotifyWithdrawn>): EventEmitter;
    NotifyWithdrawn(
      options?: EventOptions,
      cb?: Callback<NotifyWithdrawn>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RevaRewardPaid(cb?: Callback<RevaRewardPaid>): EventEmitter;
    RevaRewardPaid(
      options?: EventOptions,
      cb?: Callback<RevaRewardPaid>
    ): EventEmitter;

    SetAdmin(cb?: Callback<SetAdmin>): EventEmitter;
    SetAdmin(options?: EventOptions, cb?: Callback<SetAdmin>): EventEmitter;

    SetRevaPerBlock(cb?: Callback<SetRevaPerBlock>): EventEmitter;
    SetRevaPerBlock(
      options?: EventOptions,
      cb?: Callback<SetRevaPerBlock>
    ): EventEmitter;

    SetRevaTreasuryPerBlock(
      cb?: Callback<SetRevaTreasuryPerBlock>
    ): EventEmitter;
    SetRevaTreasuryPerBlock(
      options?: EventOptions,
      cb?: Callback<SetRevaTreasuryPerBlock>
    ): EventEmitter;

    SetRevault(cb?: Callback<SetRevault>): EventEmitter;
    SetRevault(options?: EventOptions, cb?: Callback<SetRevault>): EventEmitter;

    SetTreasury(cb?: Callback<SetTreasury>): EventEmitter;
    SetTreasury(
      options?: EventOptions,
      cb?: Callback<SetTreasury>
    ): EventEmitter;

    TokenAdded(cb?: Callback<TokenAdded>): EventEmitter;
    TokenAdded(options?: EventOptions, cb?: Callback<TokenAdded>): EventEmitter;

    TokenRewardsDisabled(cb?: Callback<TokenRewardsDisabled>): EventEmitter;
    TokenRewardsDisabled(
      options?: EventOptions,
      cb?: Callback<TokenRewardsDisabled>
    ): EventEmitter;

    TokenRewardsEnabled(cb?: Callback<TokenRewardsEnabled>): EventEmitter;
    TokenRewardsEnabled(
      options?: EventOptions,
      cb?: Callback<TokenRewardsEnabled>
    ): EventEmitter;

    TreasuryRewardClaimed(cb?: Callback<TreasuryRewardClaimed>): EventEmitter;
    TreasuryRewardClaimed(
      options?: EventOptions,
      cb?: Callback<TreasuryRewardClaimed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NotifyDeposited", cb: Callback<NotifyDeposited>): void;
  once(
    event: "NotifyDeposited",
    options: EventOptions,
    cb: Callback<NotifyDeposited>
  ): void;

  once(event: "NotifyWithdrawn", cb: Callback<NotifyWithdrawn>): void;
  once(
    event: "NotifyWithdrawn",
    options: EventOptions,
    cb: Callback<NotifyWithdrawn>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RevaRewardPaid", cb: Callback<RevaRewardPaid>): void;
  once(
    event: "RevaRewardPaid",
    options: EventOptions,
    cb: Callback<RevaRewardPaid>
  ): void;

  once(event: "SetAdmin", cb: Callback<SetAdmin>): void;
  once(event: "SetAdmin", options: EventOptions, cb: Callback<SetAdmin>): void;

  once(event: "SetRevaPerBlock", cb: Callback<SetRevaPerBlock>): void;
  once(
    event: "SetRevaPerBlock",
    options: EventOptions,
    cb: Callback<SetRevaPerBlock>
  ): void;

  once(
    event: "SetRevaTreasuryPerBlock",
    cb: Callback<SetRevaTreasuryPerBlock>
  ): void;
  once(
    event: "SetRevaTreasuryPerBlock",
    options: EventOptions,
    cb: Callback<SetRevaTreasuryPerBlock>
  ): void;

  once(event: "SetRevault", cb: Callback<SetRevault>): void;
  once(
    event: "SetRevault",
    options: EventOptions,
    cb: Callback<SetRevault>
  ): void;

  once(event: "SetTreasury", cb: Callback<SetTreasury>): void;
  once(
    event: "SetTreasury",
    options: EventOptions,
    cb: Callback<SetTreasury>
  ): void;

  once(event: "TokenAdded", cb: Callback<TokenAdded>): void;
  once(
    event: "TokenAdded",
    options: EventOptions,
    cb: Callback<TokenAdded>
  ): void;

  once(event: "TokenRewardsDisabled", cb: Callback<TokenRewardsDisabled>): void;
  once(
    event: "TokenRewardsDisabled",
    options: EventOptions,
    cb: Callback<TokenRewardsDisabled>
  ): void;

  once(event: "TokenRewardsEnabled", cb: Callback<TokenRewardsEnabled>): void;
  once(
    event: "TokenRewardsEnabled",
    options: EventOptions,
    cb: Callback<TokenRewardsEnabled>
  ): void;

  once(
    event: "TreasuryRewardClaimed",
    cb: Callback<TreasuryRewardClaimed>
  ): void;
  once(
    event: "TreasuryRewardClaimed",
    options: EventOptions,
    cb: Callback<TreasuryRewardClaimed>
  ): void;
}
