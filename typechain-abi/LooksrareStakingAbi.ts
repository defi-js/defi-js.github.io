/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  harvestedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Harvest = ContractEventLog<{
  user: string;
  harvestedAmount: string;
  0: string;
  1: string;
}>;
export type NewRewardPeriod = ContractEventLog<{
  numberBlocks: string;
  rewardPerBlock: string;
  reward: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  harvestedAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface LooksrareStakingAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LooksrareStakingAbi;
  clone(): LooksrareStakingAbi;
  methods: {
    PRECISION_FACTOR(): NonPayableTransactionObject<string>;

    calculatePendingRewards(user: string): NonPayableTransactionObject<string>;

    calculateSharePriceInLOOKS(): NonPayableTransactionObject<string>;

    calculateSharesValueInLOOKS(
      user: string
    ): NonPayableTransactionObject<string>;

    currentRewardPerBlock(): NonPayableTransactionObject<string>;

    deposit(
      amount: number | string | BN,
      claimRewardToken: boolean
    ): NonPayableTransactionObject<void>;

    harvest(): NonPayableTransactionObject<void>;

    lastRewardAdjustment(): NonPayableTransactionObject<string>;

    lastRewardBlock(): NonPayableTransactionObject<string>;

    lastUpdateBlock(): NonPayableTransactionObject<string>;

    looksRareToken(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    periodEndBlock(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardPerTokenStored(): NonPayableTransactionObject<string>;

    rewardToken(): NonPayableTransactionObject<string>;

    tokenDistributor(): NonPayableTransactionObject<string>;

    totalShares(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateRewards(
      reward: number | string | BN,
      rewardDurationInBlocks: number | string | BN
    ): NonPayableTransactionObject<void>;

    userInfo(arg0: string): NonPayableTransactionObject<{
      shares: string;
      userRewardPerTokenPaid: string;
      rewards: string;
      0: string;
      1: string;
      2: string;
    }>;

    withdraw(
      shares: number | string | BN,
      claimRewardToken: boolean
    ): NonPayableTransactionObject<void>;

    withdrawAll(claimRewardToken: boolean): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    NewRewardPeriod(cb?: Callback<NewRewardPeriod>): EventEmitter;
    NewRewardPeriod(
      options?: EventOptions,
      cb?: Callback<NewRewardPeriod>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "NewRewardPeriod", cb: Callback<NewRewardPeriod>): void;
  once(
    event: "NewRewardPeriod",
    options: EventOptions,
    cb: Callback<NewRewardPeriod>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
