/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  provider: string;
  value: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  provider: string;
  value: string;
  0: string;
  1: string;
}>;
export type UpdateLiquidityLimit = ContractEventLog<{
  user: string;
  original_balance: string;
  original_supply: string;
  working_balance: string;
  working_supply: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Transfer = ContractEventLog<{
  _from: string;
  _to: string;
  _value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Approval = ContractEventLog<{
  _owner: string;
  _spender: string;
  _value: string;
  0: string;
  1: string;
  2: string;
}>;
export type RewardDistributorUpdated = ContractEventLog<{
  reward_token: string;
  distributor: string;
  0: string;
  1: string;
}>;

export interface BalancerGaugeAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BalancerGaugeAbi;
  clone(): BalancerGaugeAbi;
  methods: {
    "deposit(uint256)"(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    "deposit(uint256,address)"(
      _value: number | string | BN,
      _addr: string
    ): NonPayableTransactionObject<void>;

    "deposit(uint256,address,bool)"(
      _value: number | string | BN,
      _addr: string,
      _claim_rewards: boolean
    ): NonPayableTransactionObject<void>;

    "withdraw(uint256)"(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    "withdraw(uint256,bool)"(
      _value: number | string | BN,
      _claim_rewards: boolean
    ): NonPayableTransactionObject<void>;

    "claim_rewards()"(): NonPayableTransactionObject<void>;

    "claim_rewards(address)"(_addr: string): NonPayableTransactionObject<void>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string
    ): NonPayableTransactionObject<void>;

    transferFrom(
      _from: string,
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transfer(
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    approve(
      _spender: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    permit(
      _owner: string,
      _spender: string,
      _value: number | string | BN,
      _deadline: number | string | BN,
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      _spender: string,
      _added_value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    user_checkpoint(addr: string): NonPayableTransactionObject<boolean>;

    set_rewards_receiver(_receiver: string): NonPayableTransactionObject<void>;

    kick(addr: string): NonPayableTransactionObject<void>;

    deposit_reward_token(
      _reward_token: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    add_reward(
      _reward_token: string,
      _distributor: string
    ): NonPayableTransactionObject<void>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string
    ): NonPayableTransactionObject<void>;

    killGauge(): NonPayableTransactionObject<void>;

    unkillGauge(): NonPayableTransactionObject<void>;

    claimed_reward(
      _addr: string,
      _token: string
    ): NonPayableTransactionObject<string>;

    claimable_reward(
      _user: string,
      _reward_token: string
    ): NonPayableTransactionObject<string>;

    claimable_tokens(addr: string): NonPayableTransactionObject<string>;

    integrate_checkpoint(): NonPayableTransactionObject<string>;

    future_epoch_time(): NonPayableTransactionObject<string>;

    inflation_rate(): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    version(): NonPayableTransactionObject<string>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    initialize(_lp_token: string): NonPayableTransactionObject<void>;

    balanceOf(arg0: string): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    nonces(arg0: string): NonPayableTransactionObject<string>;

    lp_token(): NonPayableTransactionObject<string>;

    is_killed(): NonPayableTransactionObject<boolean>;

    reward_count(): NonPayableTransactionObject<string>;

    reward_data(
      arg0: string
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string]
    >;

    rewards_receiver(arg0: string): NonPayableTransactionObject<string>;

    reward_integral_for(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    working_balances(arg0: string): NonPayableTransactionObject<string>;

    working_supply(): NonPayableTransactionObject<string>;

    integrate_inv_supply_of(arg0: string): NonPayableTransactionObject<string>;

    integrate_checkpoint_of(arg0: string): NonPayableTransactionObject<string>;

    integrate_fraction(arg0: string): NonPayableTransactionObject<string>;

    period(): NonPayableTransactionObject<string>;

    reward_tokens(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    period_timestamp(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    integrate_inv_supply(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    UpdateLiquidityLimit(cb?: Callback<UpdateLiquidityLimit>): EventEmitter;
    UpdateLiquidityLimit(
      options?: EventOptions,
      cb?: Callback<UpdateLiquidityLimit>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    RewardDistributorUpdated(
      cb?: Callback<RewardDistributorUpdated>
    ): EventEmitter;
    RewardDistributorUpdated(
      options?: EventOptions,
      cb?: Callback<RewardDistributorUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;

  once(event: "UpdateLiquidityLimit", cb: Callback<UpdateLiquidityLimit>): void;
  once(
    event: "UpdateLiquidityLimit",
    options: EventOptions,
    cb: Callback<UpdateLiquidityLimit>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(
    event: "RewardDistributorUpdated",
    cb: Callback<RewardDistributorUpdated>
  ): void;
  once(
    event: "RewardDistributorUpdated",
    options: EventOptions,
    cb: Callback<RewardDistributorUpdated>
  ): void;
}
