/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Collect = ContractEventLog<{
  tokenId: string;
  recipient: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DecreaseLiquidity = ContractEventLog<{
  tokenId: string;
  liquidity: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type IncreaseLiquidity = ContractEventLog<{
  tokenId: string;
  liquidity: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface UniswapNftManagerAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): UniswapNftManagerAbi;
  clone(): UniswapNftManagerAbi;
  methods: {
    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    PERMIT_TYPEHASH(): NonPayableTransactionObject<string>;

    WETH9(): NonPayableTransactionObject<string>;

    approve(
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    baseURI(): NonPayableTransactionObject<string>;

    burn(tokenId: number | string | BN): PayableTransactionObject<void>;

    collect(
      params: [
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    createAndInitializePoolIfNecessary(
      token0: string,
      token1: string,
      fee: number | string | BN,
      sqrtPriceX96: number | string | BN
    ): PayableTransactionObject<string>;

    decreaseLiquidity(
      params: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    factory(): NonPayableTransactionObject<string>;

    getApproved(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    increaseLiquidity(
      params: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<{
      liquidity: string;
      amount0: string;
      amount1: string;
      0: string;
      1: string;
      2: string;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    mint(
      params: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        number | string | BN
      ]
    ): PayableTransactionObject<{
      tokenId: string;
      liquidity: string;
      amount0: string;
      amount1: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    multicall(data: (string | number[])[]): PayableTransactionObject<string[]>;

    name(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    permit(
      spender: string,
      tokenId: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    positions(tokenId: number | string | BN): NonPayableTransactionObject<{
      nonce: string;
      operator: string;
      token0: string;
      token1: string;
      fee: string;
      tickLower: string;
      tickUpper: string;
      liquidity: string;
      feeGrowthInside0LastX128: string;
      feeGrowthInside1LastX128: string;
      tokensOwed0: string;
      tokensOwed1: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string;
      11: string;
    }>;

    refundETH(): PayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    selfPermit(
      token: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    selfPermitAllowed(
      token: string,
      nonce: number | string | BN,
      expiry: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    selfPermitAllowedIfNecessary(
      token: string,
      nonce: number | string | BN,
      expiry: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    selfPermitIfNecessary(
      token: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    sweepToken(
      token: string,
      amountMinimum: number | string | BN,
      recipient: string
    ): PayableTransactionObject<void>;

    symbol(): NonPayableTransactionObject<string>;

    tokenByIndex(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokenOfOwnerByIndex(
      owner: string,
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokenURI(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    uniswapV3MintCallback(
      amount0Owed: number | string | BN,
      amount1Owed: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    unwrapWETH9(
      amountMinimum: number | string | BN,
      recipient: string
    ): PayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    Collect(cb?: Callback<Collect>): EventEmitter;
    Collect(options?: EventOptions, cb?: Callback<Collect>): EventEmitter;

    DecreaseLiquidity(cb?: Callback<DecreaseLiquidity>): EventEmitter;
    DecreaseLiquidity(
      options?: EventOptions,
      cb?: Callback<DecreaseLiquidity>
    ): EventEmitter;

    IncreaseLiquidity(cb?: Callback<IncreaseLiquidity>): EventEmitter;
    IncreaseLiquidity(
      options?: EventOptions,
      cb?: Callback<IncreaseLiquidity>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "Collect", cb: Callback<Collect>): void;
  once(event: "Collect", options: EventOptions, cb: Callback<Collect>): void;

  once(event: "DecreaseLiquidity", cb: Callback<DecreaseLiquidity>): void;
  once(
    event: "DecreaseLiquidity",
    options: EventOptions,
    cb: Callback<DecreaseLiquidity>
  ): void;

  once(event: "IncreaseLiquidity", cb: Callback<IncreaseLiquidity>): void;
  once(
    event: "IncreaseLiquidity",
    options: EventOptions,
    cb: Callback<IncreaseLiquidity>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
