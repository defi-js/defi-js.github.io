/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogBorrow = ContractEventLog<{
  token: string;
  owner: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogMint = ContractEventLog<{
  token: string;
  owner: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogRedeem = ContractEventLog<{
  token: string;
  owner: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogRedeemUnderlying = ContractEventLog<{
  token: string;
  owner: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogRepay = ContractEventLog<{
  token: string;
  owner: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type ManagerUpdated = ContractEventLog<{
  prevManager: string;
  newManager: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface CompoundLoopAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CompoundLoopAbi;
  clone(): CompoundLoopAbi;
  methods: {
    COMP(): NonPayableTransactionObject<string>;

    CUSDC(): NonPayableTransactionObject<string>;

    UNITROLLER(): NonPayableTransactionObject<string>;

    USDC(): NonPayableTransactionObject<string>;

    borrow(amount: number | string | BN): NonPayableTransactionObject<void>;

    borrowBalanceCurrent(): NonPayableTransactionObject<string>;

    cTokenBalance(): NonPayableTransactionObject<string>;

    claimAndTransferAllCompToOwner(): NonPayableTransactionObject<void>;

    "claimComp()"(): NonPayableTransactionObject<string>;

    "claimComp(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean
    ): NonPayableTransactionObject<void>;

    emergencySafeTransferAsset(
      asset_: string,
      to_: string,
      amount_: number | string | BN
    ): NonPayableTransactionObject<void>;

    emergencySubmitTransaction(
      destination: string,
      data: string | number[],
      gasLimit: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    emergencyTransferAll(
      tokens_: string[],
      to_: string
    ): NonPayableTransactionObject<void>;

    emergencyTransferAsset(
      asset_: string,
      to_: string,
      amount_: number | string | BN
    ): NonPayableTransactionObject<void>;

    enterMarkets(): NonPayableTransactionObject<void>;

    enterPosition(
      minAmountIn: number | string | BN,
      borrowRatioNum: number | string | BN,
      borrowRatioDenom: number | string | BN
    ): NonPayableTransactionObject<void>;

    exitPosition(
      maxIterations: number | string | BN,
      redeemRatioNum: number | string | BN,
      redeemRatioDenom: number | string | BN
    ): NonPayableTransactionObject<string>;

    getAccountLiquidity(): NonPayableTransactionObject<{
      err: string;
      liquidity: string;
      shortfall: string;
      0: string;
      1: string;
      2: string;
    }>;

    getAccountLiquidityWithInterest(): NonPayableTransactionObject<{
      err: string;
      accountLiquidity: string;
      accountShortfall: string;
      0: string;
      1: string;
      2: string;
    }>;

    manager(): NonPayableTransactionObject<string>;

    mintCToken(amount: number | string | BN): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    redeemCToken(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    redeemUnderlying(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    repayBorrow(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    repayBorrowAll(): NonPayableTransactionObject<void>;

    safeTransferAssetToOwner(src: string): NonPayableTransactionObject<void>;

    safeTransferUSDCToOwner(): NonPayableTransactionObject<void>;

    setApprove(): NonPayableTransactionObject<void>;

    setManager(_newManager: string): NonPayableTransactionObject<void>;

    transferFrom(
      src_: string,
      amount_: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    underlyingBalance(): NonPayableTransactionObject<string>;
  };
  events: {
    LogBorrow(cb?: Callback<LogBorrow>): EventEmitter;
    LogBorrow(options?: EventOptions, cb?: Callback<LogBorrow>): EventEmitter;

    LogMint(cb?: Callback<LogMint>): EventEmitter;
    LogMint(options?: EventOptions, cb?: Callback<LogMint>): EventEmitter;

    LogRedeem(cb?: Callback<LogRedeem>): EventEmitter;
    LogRedeem(options?: EventOptions, cb?: Callback<LogRedeem>): EventEmitter;

    LogRedeemUnderlying(cb?: Callback<LogRedeemUnderlying>): EventEmitter;
    LogRedeemUnderlying(
      options?: EventOptions,
      cb?: Callback<LogRedeemUnderlying>
    ): EventEmitter;

    LogRepay(cb?: Callback<LogRepay>): EventEmitter;
    LogRepay(options?: EventOptions, cb?: Callback<LogRepay>): EventEmitter;

    ManagerUpdated(cb?: Callback<ManagerUpdated>): EventEmitter;
    ManagerUpdated(
      options?: EventOptions,
      cb?: Callback<ManagerUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogBorrow", cb: Callback<LogBorrow>): void;
  once(
    event: "LogBorrow",
    options: EventOptions,
    cb: Callback<LogBorrow>
  ): void;

  once(event: "LogMint", cb: Callback<LogMint>): void;
  once(event: "LogMint", options: EventOptions, cb: Callback<LogMint>): void;

  once(event: "LogRedeem", cb: Callback<LogRedeem>): void;
  once(
    event: "LogRedeem",
    options: EventOptions,
    cb: Callback<LogRedeem>
  ): void;

  once(event: "LogRedeemUnderlying", cb: Callback<LogRedeemUnderlying>): void;
  once(
    event: "LogRedeemUnderlying",
    options: EventOptions,
    cb: Callback<LogRedeemUnderlying>
  ): void;

  once(event: "LogRepay", cb: Callback<LogRepay>): void;
  once(event: "LogRepay", options: EventOptions, cb: Callback<LogRepay>): void;

  once(event: "ManagerUpdated", cb: Callback<ManagerUpdated>): void;
  once(
    event: "ManagerUpdated",
    options: EventOptions,
    cb: Callback<ManagerUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
