/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuthorizerChanged = ContractEventLog<{
  newAuthorizer: string;
  0: string;
}>;
export type ExternalBalanceTransfer = ContractEventLog<{
  token: string;
  sender: string;
  recipient: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type FlashLoan = ContractEventLog<{
  recipient: string;
  token: string;
  amount: string;
  feeAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type InternalBalanceChanged = ContractEventLog<{
  user: string;
  token: string;
  delta: string;
  0: string;
  1: string;
  2: string;
}>;
export type PausedStateChanged = ContractEventLog<{
  paused: boolean;
  0: boolean;
}>;
export type PoolBalanceChanged = ContractEventLog<{
  poolId: string;
  liquidityProvider: string;
  tokens: string[];
  deltas: string[];
  protocolFeeAmounts: string[];
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
}>;
export type PoolBalanceManaged = ContractEventLog<{
  poolId: string;
  assetManager: string;
  token: string;
  cashDelta: string;
  managedDelta: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type PoolRegistered = ContractEventLog<{
  poolId: string;
  poolAddress: string;
  specialization: string;
  0: string;
  1: string;
  2: string;
}>;
export type RelayerApprovalChanged = ContractEventLog<{
  relayer: string;
  sender: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Swap = ContractEventLog<{
  poolId: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  amountOut: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type TokensDeregistered = ContractEventLog<{
  poolId: string;
  tokens: string[];
  0: string;
  1: string[];
}>;
export type TokensRegistered = ContractEventLog<{
  poolId: string;
  tokens: string[];
  assetManagers: string[];
  0: string;
  1: string[];
  2: string[];
}>;

export interface BalancerV2VaultAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BalancerV2VaultAbi;
  clone(): BalancerV2VaultAbi;
  methods: {
    WETH(): NonPayableTransactionObject<string>;

    batchSwap(
      kind: number | string | BN,
      swaps: [
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[]
      ][],
      assets: string[],
      funds: [string, boolean, string, boolean],
      limits: (number | string | BN)[],
      deadline: number | string | BN
    ): PayableTransactionObject<string[]>;

    deregisterTokens(
      poolId: string | number[],
      tokens: string[]
    ): NonPayableTransactionObject<void>;

    exitPool(
      poolId: string | number[],
      sender: string,
      recipient: string,
      request: [string[], (number | string | BN)[], string | number[], boolean]
    ): NonPayableTransactionObject<void>;

    flashLoan(
      recipient: string,
      tokens: string[],
      amounts: (number | string | BN)[],
      userData: string | number[]
    ): NonPayableTransactionObject<void>;

    getActionId(
      selector: string | number[]
    ): NonPayableTransactionObject<string>;

    getAuthorizer(): NonPayableTransactionObject<string>;

    getDomainSeparator(): NonPayableTransactionObject<string>;

    getInternalBalance(
      user: string,
      tokens: string[]
    ): NonPayableTransactionObject<string[]>;

    getNextNonce(user: string): NonPayableTransactionObject<string>;

    getPausedState(): NonPayableTransactionObject<{
      paused: boolean;
      pauseWindowEndTime: string;
      bufferPeriodEndTime: string;
      0: boolean;
      1: string;
      2: string;
    }>;

    getPool(poolId: string | number[]): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getPoolTokenInfo(
      poolId: string | number[],
      token: string
    ): NonPayableTransactionObject<{
      cash: string;
      managed: string;
      lastChangeBlock: string;
      assetManager: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    getPoolTokens(poolId: string | number[]): NonPayableTransactionObject<{
      tokens: string[];
      balances: string[];
      lastChangeBlock: string;
      0: string[];
      1: string[];
      2: string;
    }>;

    getProtocolFeesCollector(): NonPayableTransactionObject<string>;

    hasApprovedRelayer(
      user: string,
      relayer: string
    ): NonPayableTransactionObject<boolean>;

    joinPool(
      poolId: string | number[],
      sender: string,
      recipient: string,
      request: [string[], (number | string | BN)[], string | number[], boolean]
    ): PayableTransactionObject<void>;

    managePoolBalance(
      ops: [
        number | string | BN,
        string | number[],
        string,
        number | string | BN
      ][]
    ): NonPayableTransactionObject<void>;

    manageUserBalance(
      ops: [
        number | string | BN,
        string,
        number | string | BN,
        string,
        string
      ][]
    ): PayableTransactionObject<void>;

    queryBatchSwap(
      kind: number | string | BN,
      swaps: [
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[]
      ][],
      assets: string[],
      funds: [string, boolean, string, boolean]
    ): NonPayableTransactionObject<string[]>;

    registerPool(
      specialization: number | string | BN
    ): NonPayableTransactionObject<string>;

    registerTokens(
      poolId: string | number[],
      tokens: string[],
      assetManagers: string[]
    ): NonPayableTransactionObject<void>;

    setAuthorizer(newAuthorizer: string): NonPayableTransactionObject<void>;

    setPaused(paused: boolean): NonPayableTransactionObject<void>;

    setRelayerApproval(
      sender: string,
      relayer: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    swap(
      singleSwap: [
        string | number[],
        number | string | BN,
        string,
        string,
        number | string | BN,
        string | number[]
      ],
      funds: [string, boolean, string, boolean],
      limit: number | string | BN,
      deadline: number | string | BN
    ): PayableTransactionObject<string>;
  };
  events: {
    AuthorizerChanged(cb?: Callback<AuthorizerChanged>): EventEmitter;
    AuthorizerChanged(
      options?: EventOptions,
      cb?: Callback<AuthorizerChanged>
    ): EventEmitter;

    ExternalBalanceTransfer(
      cb?: Callback<ExternalBalanceTransfer>
    ): EventEmitter;
    ExternalBalanceTransfer(
      options?: EventOptions,
      cb?: Callback<ExternalBalanceTransfer>
    ): EventEmitter;

    FlashLoan(cb?: Callback<FlashLoan>): EventEmitter;
    FlashLoan(options?: EventOptions, cb?: Callback<FlashLoan>): EventEmitter;

    InternalBalanceChanged(cb?: Callback<InternalBalanceChanged>): EventEmitter;
    InternalBalanceChanged(
      options?: EventOptions,
      cb?: Callback<InternalBalanceChanged>
    ): EventEmitter;

    PausedStateChanged(cb?: Callback<PausedStateChanged>): EventEmitter;
    PausedStateChanged(
      options?: EventOptions,
      cb?: Callback<PausedStateChanged>
    ): EventEmitter;

    PoolBalanceChanged(cb?: Callback<PoolBalanceChanged>): EventEmitter;
    PoolBalanceChanged(
      options?: EventOptions,
      cb?: Callback<PoolBalanceChanged>
    ): EventEmitter;

    PoolBalanceManaged(cb?: Callback<PoolBalanceManaged>): EventEmitter;
    PoolBalanceManaged(
      options?: EventOptions,
      cb?: Callback<PoolBalanceManaged>
    ): EventEmitter;

    PoolRegistered(cb?: Callback<PoolRegistered>): EventEmitter;
    PoolRegistered(
      options?: EventOptions,
      cb?: Callback<PoolRegistered>
    ): EventEmitter;

    RelayerApprovalChanged(cb?: Callback<RelayerApprovalChanged>): EventEmitter;
    RelayerApprovalChanged(
      options?: EventOptions,
      cb?: Callback<RelayerApprovalChanged>
    ): EventEmitter;

    Swap(cb?: Callback<Swap>): EventEmitter;
    Swap(options?: EventOptions, cb?: Callback<Swap>): EventEmitter;

    TokensDeregistered(cb?: Callback<TokensDeregistered>): EventEmitter;
    TokensDeregistered(
      options?: EventOptions,
      cb?: Callback<TokensDeregistered>
    ): EventEmitter;

    TokensRegistered(cb?: Callback<TokensRegistered>): EventEmitter;
    TokensRegistered(
      options?: EventOptions,
      cb?: Callback<TokensRegistered>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuthorizerChanged", cb: Callback<AuthorizerChanged>): void;
  once(
    event: "AuthorizerChanged",
    options: EventOptions,
    cb: Callback<AuthorizerChanged>
  ): void;

  once(
    event: "ExternalBalanceTransfer",
    cb: Callback<ExternalBalanceTransfer>
  ): void;
  once(
    event: "ExternalBalanceTransfer",
    options: EventOptions,
    cb: Callback<ExternalBalanceTransfer>
  ): void;

  once(event: "FlashLoan", cb: Callback<FlashLoan>): void;
  once(
    event: "FlashLoan",
    options: EventOptions,
    cb: Callback<FlashLoan>
  ): void;

  once(
    event: "InternalBalanceChanged",
    cb: Callback<InternalBalanceChanged>
  ): void;
  once(
    event: "InternalBalanceChanged",
    options: EventOptions,
    cb: Callback<InternalBalanceChanged>
  ): void;

  once(event: "PausedStateChanged", cb: Callback<PausedStateChanged>): void;
  once(
    event: "PausedStateChanged",
    options: EventOptions,
    cb: Callback<PausedStateChanged>
  ): void;

  once(event: "PoolBalanceChanged", cb: Callback<PoolBalanceChanged>): void;
  once(
    event: "PoolBalanceChanged",
    options: EventOptions,
    cb: Callback<PoolBalanceChanged>
  ): void;

  once(event: "PoolBalanceManaged", cb: Callback<PoolBalanceManaged>): void;
  once(
    event: "PoolBalanceManaged",
    options: EventOptions,
    cb: Callback<PoolBalanceManaged>
  ): void;

  once(event: "PoolRegistered", cb: Callback<PoolRegistered>): void;
  once(
    event: "PoolRegistered",
    options: EventOptions,
    cb: Callback<PoolRegistered>
  ): void;

  once(
    event: "RelayerApprovalChanged",
    cb: Callback<RelayerApprovalChanged>
  ): void;
  once(
    event: "RelayerApprovalChanged",
    options: EventOptions,
    cb: Callback<RelayerApprovalChanged>
  ): void;

  once(event: "Swap", cb: Callback<Swap>): void;
  once(event: "Swap", options: EventOptions, cb: Callback<Swap>): void;

  once(event: "TokensDeregistered", cb: Callback<TokensDeregistered>): void;
  once(
    event: "TokensDeregistered",
    options: EventOptions,
    cb: Callback<TokensDeregistered>
  ): void;

  once(event: "TokensRegistered", cb: Callback<TokensRegistered>): void;
  once(
    event: "TokensRegistered",
    options: EventOptions,
    cb: Callback<TokensRegistered>
  ): void;
}
