/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogBorrow = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type LogDeposit = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type LogRepay = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type LogWithdraw = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface AaveLoopAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AaveLoopAbi;
  clone(): AaveLoopAbi;
  methods: {
    AUSDC(): NonPayableTransactionObject<string>;

    BASE_PERCENT(): NonPayableTransactionObject<string>;

    DEBT_TOKEN(): NonPayableTransactionObject<string>;

    LENDING_POOL(): NonPayableTransactionObject<string>;

    LIQUIDITY_MINING(): NonPayableTransactionObject<string>;

    REWARD_TOKEN(): NonPayableTransactionObject<string>;

    USDC(): NonPayableTransactionObject<string>;

    _borrow(amount: number | string | BN): NonPayableTransactionObject<void>;

    _deposit(amount: number | string | BN): NonPayableTransactionObject<void>;

    _repay(amount: number | string | BN): NonPayableTransactionObject<void>;

    _withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;

    claimRewardsToOwner(): NonPayableTransactionObject<void>;

    emergencyFunctionCall(
      target: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    emergencyFunctionDelegateCall(
      target: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    enterPosition(
      iterations: number | string | BN
    ): NonPayableTransactionObject<void>;

    exitPosition(
      maxIterations: number | string | BN
    ): NonPayableTransactionObject<void>;

    getBalanceAUSDC(): NonPayableTransactionObject<string>;

    getBalanceDebtToken(): NonPayableTransactionObject<string>;

    getBalanceReward(): NonPayableTransactionObject<string>;

    getBalanceUSDC(): NonPayableTransactionObject<string>;

    getPositionData(): NonPayableTransactionObject<{
      totalCollateralETH: string;
      totalDebtETH: string;
      availableBorrowsETH: string;
      currentLiquidationThreshold: string;
      ltv: string;
      healthFactor: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdrawAllUSDCToOwner(): NonPayableTransactionObject<void>;

    withdrawToOwner(asset: string): NonPayableTransactionObject<void>;
  };
  events: {
    LogBorrow(cb?: Callback<LogBorrow>): EventEmitter;
    LogBorrow(options?: EventOptions, cb?: Callback<LogBorrow>): EventEmitter;

    LogDeposit(cb?: Callback<LogDeposit>): EventEmitter;
    LogDeposit(options?: EventOptions, cb?: Callback<LogDeposit>): EventEmitter;

    LogRepay(cb?: Callback<LogRepay>): EventEmitter;
    LogRepay(options?: EventOptions, cb?: Callback<LogRepay>): EventEmitter;

    LogWithdraw(cb?: Callback<LogWithdraw>): EventEmitter;
    LogWithdraw(
      options?: EventOptions,
      cb?: Callback<LogWithdraw>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogBorrow", cb: Callback<LogBorrow>): void;
  once(
    event: "LogBorrow",
    options: EventOptions,
    cb: Callback<LogBorrow>
  ): void;

  once(event: "LogDeposit", cb: Callback<LogDeposit>): void;
  once(
    event: "LogDeposit",
    options: EventOptions,
    cb: Callback<LogDeposit>
  ): void;

  once(event: "LogRepay", cb: Callback<LogRepay>): void;
  once(event: "LogRepay", options: EventOptions, cb: Callback<LogRepay>): void;

  once(event: "LogWithdraw", cb: Callback<LogWithdraw>): void;
  once(
    event: "LogWithdraw",
    options: EventOptions,
    cb: Callback<LogWithdraw>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
