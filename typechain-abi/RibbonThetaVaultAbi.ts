/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type AuctionDurationSet = ContractEventLog<{
  auctionDuration: string;
  newAuctionDuration: string;
  0: string;
  1: string;
}>;
export type CapSet = ContractEventLog<{
  oldCap: string;
  newCap: string;
  0: string;
  1: string;
}>;
export type CloseShort = ContractEventLog<{
  options: string;
  withdrawAmount: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type CollectVaultFees = ContractEventLog<{
  performanceFee: string;
  vaultFee: string;
  round: string;
  feeRecipient: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Deposit = ContractEventLog<{
  account: string;
  amount: string;
  round: string;
  0: string;
  1: string;
  2: string;
}>;
export type InitiateGnosisAuction = ContractEventLog<{
  auctioningToken: string;
  biddingToken: string;
  auctionCounter: string;
  manager: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type InitiateWithdraw = ContractEventLog<{
  account: string;
  shares: string;
  round: string;
  0: string;
  1: string;
  2: string;
}>;
export type InstantWithdraw = ContractEventLog<{
  account: string;
  amount: string;
  round: string;
  0: string;
  1: string;
  2: string;
}>;
export type ManagementFeeSet = ContractEventLog<{
  managementFee: string;
  newManagementFee: string;
  0: string;
  1: string;
}>;
export type NewOptionStrikeSelected = ContractEventLog<{
  strikePrice: string;
  delta: string;
  0: string;
  1: string;
}>;
export type OpenShort = ContractEventLog<{
  options: string;
  depositAmount: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PerformanceFeeSet = ContractEventLog<{
  performanceFee: string;
  newPerformanceFee: string;
  0: string;
  1: string;
}>;
export type PremiumDiscountSet = ContractEventLog<{
  premiumDiscount: string;
  newPremiumDiscount: string;
  0: string;
  1: string;
}>;
export type Redeem = ContractEventLog<{
  account: string;
  share: string;
  round: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  account: string;
  amount: string;
  shares: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RibbonThetaVaultAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RibbonThetaVaultAbi;
  clone(): RibbonThetaVaultAbi;
  methods: {
    DELAY(): NonPayableTransactionObject<string>;

    GAMMA_CONTROLLER(): NonPayableTransactionObject<string>;

    GNOSIS_EASY_AUCTION(): NonPayableTransactionObject<string>;

    LDO(): NonPayableTransactionObject<string>;

    MARGIN_POOL(): NonPayableTransactionObject<string>;

    OTOKEN_FACTORY(): NonPayableTransactionObject<string>;

    PERIOD(): NonPayableTransactionObject<string>;

    STETH(): NonPayableTransactionObject<string>;

    STETH_ETH_CRV_POOL(): NonPayableTransactionObject<string>;

    USDC(): NonPayableTransactionObject<string>;

    WETH(): NonPayableTransactionObject<string>;

    accountVaultBalance(account: string): NonPayableTransactionObject<string>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    auctionDuration(): NonPayableTransactionObject<string>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    burnRemainingOTokens(): NonPayableTransactionObject<void>;

    cap(): NonPayableTransactionObject<string>;

    collateralToken(): NonPayableTransactionObject<string>;

    commitAndClose(): NonPayableTransactionObject<void>;

    completeWithdraw(
      minETHOut: number | string | BN
    ): NonPayableTransactionObject<void>;

    currentOption(): NonPayableTransactionObject<string>;

    currentOtokenPremium(): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    depositETH(): PayableTransactionObject<void>;

    depositFor(creditor: string): PayableTransactionObject<void>;

    depositReceipts(arg0: string): NonPayableTransactionObject<{
      round: string;
      amount: string;
      unredeemedShares: string;
      0: string;
      1: string;
      2: string;
    }>;

    depositYieldToken(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    feeRecipient(): NonPayableTransactionObject<string>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    initRounds(
      numRounds: number | string | BN
    ): NonPayableTransactionObject<void>;

    initialize(
      _owner: string,
      _keeper: string,
      _feeRecipient: string,
      _managementFee: number | string | BN,
      _performanceFee: number | string | BN,
      _tokenName: string,
      _tokenSymbol: string,
      _optionsPremiumPricer: string,
      _strikeSelection: string,
      _premiumDiscount: number | string | BN,
      _auctionDuration: number | string | BN,
      _vaultParams: [
        boolean,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    initiateWithdraw(
      numShares: number | string | BN
    ): NonPayableTransactionObject<void>;

    keeper(): NonPayableTransactionObject<string>;

    lastQueuedWithdrawAmount(): NonPayableTransactionObject<string>;

    lastStrikeOverrideRound(): NonPayableTransactionObject<string>;

    liquidityGauge(): NonPayableTransactionObject<string>;

    managementFee(): NonPayableTransactionObject<string>;

    maxRedeem(): NonPayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    nextOption(): NonPayableTransactionObject<string>;

    nextOptionReadyAt(): NonPayableTransactionObject<string>;

    optionAuctionID(): NonPayableTransactionObject<string>;

    optionState(): NonPayableTransactionObject<{
      nextOption: string;
      currentOption: string;
      nextOptionReadyAt: string;
      0: string;
      1: string;
      2: string;
    }>;

    optionsPremiumPricer(): NonPayableTransactionObject<string>;

    overriddenStrikePrice(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    performanceFee(): NonPayableTransactionObject<string>;

    premiumDiscount(): NonPayableTransactionObject<string>;

    pricePerShare(): NonPayableTransactionObject<string>;

    redeem(numShares: number | string | BN): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rollToNextOption(): NonPayableTransactionObject<void>;

    roundPricePerShare(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    sendLDORewards(): NonPayableTransactionObject<void>;

    setAuctionDuration(
      newAuctionDuration: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCap(newCap: number | string | BN): NonPayableTransactionObject<void>;

    setFeeRecipient(newFeeRecipient: string): NonPayableTransactionObject<void>;

    setLiquidityGauge(
      newLiquidityGauge: string
    ): NonPayableTransactionObject<void>;

    setManagementFee(
      newManagementFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setNewKeeper(newKeeper: string): NonPayableTransactionObject<void>;

    setPerformanceFee(
      newPerformanceFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPremiumDiscount(
      newPremiumDiscount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setStrikePrice(
      strikePrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    setStrikeSelectionOrPricer(
      newContract: string,
      isStrikeSelection: boolean
    ): NonPayableTransactionObject<void>;

    shareBalances(account: string): NonPayableTransactionObject<{
      heldByAccount: string;
      heldByVault: string;
      0: string;
      1: string;
    }>;

    shares(account: string): NonPayableTransactionObject<string>;

    stake(numShares: number | string | BN): NonPayableTransactionObject<void>;

    startAuction(): NonPayableTransactionObject<void>;

    strikeSelection(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    totalBalance(): NonPayableTransactionObject<string>;

    totalPending(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    vaultParams(): NonPayableTransactionObject<{
      isPut: boolean;
      decimals: string;
      asset: string;
      underlying: string;
      minimumSupply: string;
      cap: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    vaultState(): NonPayableTransactionObject<{
      round: string;
      lockedAmount: string;
      lastLockedAmount: string;
      totalPending: string;
      queuedWithdrawShares: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    withdrawInstantly(
      amount: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawals(arg0: string): NonPayableTransactionObject<{
      round: string;
      shares: string;
      0: string;
      1: string;
    }>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    AuctionDurationSet(cb?: Callback<AuctionDurationSet>): EventEmitter;
    AuctionDurationSet(
      options?: EventOptions,
      cb?: Callback<AuctionDurationSet>
    ): EventEmitter;

    CapSet(cb?: Callback<CapSet>): EventEmitter;
    CapSet(options?: EventOptions, cb?: Callback<CapSet>): EventEmitter;

    CloseShort(cb?: Callback<CloseShort>): EventEmitter;
    CloseShort(options?: EventOptions, cb?: Callback<CloseShort>): EventEmitter;

    CollectVaultFees(cb?: Callback<CollectVaultFees>): EventEmitter;
    CollectVaultFees(
      options?: EventOptions,
      cb?: Callback<CollectVaultFees>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    InitiateGnosisAuction(cb?: Callback<InitiateGnosisAuction>): EventEmitter;
    InitiateGnosisAuction(
      options?: EventOptions,
      cb?: Callback<InitiateGnosisAuction>
    ): EventEmitter;

    InitiateWithdraw(cb?: Callback<InitiateWithdraw>): EventEmitter;
    InitiateWithdraw(
      options?: EventOptions,
      cb?: Callback<InitiateWithdraw>
    ): EventEmitter;

    InstantWithdraw(cb?: Callback<InstantWithdraw>): EventEmitter;
    InstantWithdraw(
      options?: EventOptions,
      cb?: Callback<InstantWithdraw>
    ): EventEmitter;

    ManagementFeeSet(cb?: Callback<ManagementFeeSet>): EventEmitter;
    ManagementFeeSet(
      options?: EventOptions,
      cb?: Callback<ManagementFeeSet>
    ): EventEmitter;

    NewOptionStrikeSelected(
      cb?: Callback<NewOptionStrikeSelected>
    ): EventEmitter;
    NewOptionStrikeSelected(
      options?: EventOptions,
      cb?: Callback<NewOptionStrikeSelected>
    ): EventEmitter;

    OpenShort(cb?: Callback<OpenShort>): EventEmitter;
    OpenShort(options?: EventOptions, cb?: Callback<OpenShort>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PerformanceFeeSet(cb?: Callback<PerformanceFeeSet>): EventEmitter;
    PerformanceFeeSet(
      options?: EventOptions,
      cb?: Callback<PerformanceFeeSet>
    ): EventEmitter;

    PremiumDiscountSet(cb?: Callback<PremiumDiscountSet>): EventEmitter;
    PremiumDiscountSet(
      options?: EventOptions,
      cb?: Callback<PremiumDiscountSet>
    ): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "AuctionDurationSet", cb: Callback<AuctionDurationSet>): void;
  once(
    event: "AuctionDurationSet",
    options: EventOptions,
    cb: Callback<AuctionDurationSet>
  ): void;

  once(event: "CapSet", cb: Callback<CapSet>): void;
  once(event: "CapSet", options: EventOptions, cb: Callback<CapSet>): void;

  once(event: "CloseShort", cb: Callback<CloseShort>): void;
  once(
    event: "CloseShort",
    options: EventOptions,
    cb: Callback<CloseShort>
  ): void;

  once(event: "CollectVaultFees", cb: Callback<CollectVaultFees>): void;
  once(
    event: "CollectVaultFees",
    options: EventOptions,
    cb: Callback<CollectVaultFees>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(
    event: "InitiateGnosisAuction",
    cb: Callback<InitiateGnosisAuction>
  ): void;
  once(
    event: "InitiateGnosisAuction",
    options: EventOptions,
    cb: Callback<InitiateGnosisAuction>
  ): void;

  once(event: "InitiateWithdraw", cb: Callback<InitiateWithdraw>): void;
  once(
    event: "InitiateWithdraw",
    options: EventOptions,
    cb: Callback<InitiateWithdraw>
  ): void;

  once(event: "InstantWithdraw", cb: Callback<InstantWithdraw>): void;
  once(
    event: "InstantWithdraw",
    options: EventOptions,
    cb: Callback<InstantWithdraw>
  ): void;

  once(event: "ManagementFeeSet", cb: Callback<ManagementFeeSet>): void;
  once(
    event: "ManagementFeeSet",
    options: EventOptions,
    cb: Callback<ManagementFeeSet>
  ): void;

  once(
    event: "NewOptionStrikeSelected",
    cb: Callback<NewOptionStrikeSelected>
  ): void;
  once(
    event: "NewOptionStrikeSelected",
    options: EventOptions,
    cb: Callback<NewOptionStrikeSelected>
  ): void;

  once(event: "OpenShort", cb: Callback<OpenShort>): void;
  once(
    event: "OpenShort",
    options: EventOptions,
    cb: Callback<OpenShort>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PerformanceFeeSet", cb: Callback<PerformanceFeeSet>): void;
  once(
    event: "PerformanceFeeSet",
    options: EventOptions,
    cb: Callback<PerformanceFeeSet>
  ): void;

  once(event: "PremiumDiscountSet", cb: Callback<PremiumDiscountSet>): void;
  once(
    event: "PremiumDiscountSet",
    options: EventOptions,
    cb: Callback<PremiumDiscountSet>
  ): void;

  once(event: "Redeem", cb: Callback<Redeem>): void;
  once(event: "Redeem", options: EventOptions, cb: Callback<Redeem>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
