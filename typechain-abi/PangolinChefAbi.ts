/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type FunderAdded = ContractEventLog<{
  funder: string;
  0: string;
}>;
export type FunderRemoved = ContractEventLog<{
  funder: string;
  0: string;
}>;
export type Harvest = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogRewardPerSecond = ContractEventLog<{
  rewardPerSecond: string;
  0: string;
}>;
export type LogRewardsExpiration = ContractEventLog<{
  rewardsExpiration: string;
  0: string;
}>;
export type Migrate = ContractEventLog<{
  pid: string;
  0: string;
}>;
export type MigratorDisabled = ContractEventLog<{}>;
export type MigratorSet = ContractEventLog<{
  migrator: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PoolAdded = ContractEventLog<{
  pid: string;
  allocPoint: string;
  lpToken: string;
  rewarder: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PoolSet = ContractEventLog<{
  pid: string;
  allocPoint: string;
  rewarder: string;
  overwrite: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type PoolUpdate = ContractEventLog<{
  pid: string;
  lastRewardTime: string;
  lpSupply: string;
  accRewardPerShare: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  pid: string;
  amount: string;
  to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface PangolinChefAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PangolinChefAbi;
  clone(): PangolinChefAbi;
  methods: {
    REWARD(): NonPayableTransactionObject<string>;

    addFunder(_funder: string): NonPayableTransactionObject<void>;

    addPool(
      _allocPoint: number | string | BN,
      _lpToken: string,
      _rewarder: string
    ): NonPayableTransactionObject<void>;

    addPools(
      _allocPoints: (number | string | BN)[],
      _lpTokens: string[],
      _rewarders: string[]
    ): NonPayableTransactionObject<void>;

    addedTokens(arg0: string): NonPayableTransactionObject<boolean>;

    deposit(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    depositWithPermit(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    disableMigrator(): NonPayableTransactionObject<void>;

    emergencyWithdraw(
      pid: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    extendRewardsViaDuration(
      extension: number | string | BN,
      maxFunding: number | string | BN
    ): NonPayableTransactionObject<void>;

    extendRewardsViaFunding(
      funding: number | string | BN,
      minExtension: number | string | BN
    ): NonPayableTransactionObject<void>;

    fundRewards(
      funding: number | string | BN,
      duration: number | string | BN
    ): NonPayableTransactionObject<void>;

    harvest(
      pid: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    isFunder(_funder: string): NonPayableTransactionObject<boolean>;

    lpToken(arg0: number | string | BN): NonPayableTransactionObject<string>;

    lpTokens(): NonPayableTransactionObject<string[]>;

    massUpdateAllPools(): NonPayableTransactionObject<void>;

    massUpdatePools(
      pids: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    migrate(_pid: number | string | BN): NonPayableTransactionObject<void>;

    migrationDisabled(): NonPayableTransactionObject<boolean>;

    migrator(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingReward(
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      accRewardPerShare: string;
      lastRewardTime: string;
      allocPoint: string;
      0: string;
      1: string;
      2: string;
    }>;

    poolInfos(): NonPayableTransactionObject<[string, string, string][]>;

    poolLength(): NonPayableTransactionObject<string>;

    removeFunder(_funder: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    resetRewardsDuration(
      duration: number | string | BN
    ): NonPayableTransactionObject<void>;

    rewardPerSecond(): NonPayableTransactionObject<string>;

    rewarder(arg0: number | string | BN): NonPayableTransactionObject<string>;

    rewardsExpiration(): NonPayableTransactionObject<string>;

    setMigrator(_migrator: string): NonPayableTransactionObject<void>;

    setPool(
      _pid: number | string | BN,
      _allocPoint: number | string | BN,
      _rewarder: string,
      overwrite: boolean
    ): NonPayableTransactionObject<void>;

    setPools(
      pids: (number | string | BN)[],
      allocPoints: (number | string | BN)[],
      rewarders: string[],
      overwrites: boolean[]
    ): NonPayableTransactionObject<void>;

    totalAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updatePool(
      pid: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    userInfo(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    withdraw(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;

    withdrawAndHarvest(
      pid: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    FunderAdded(cb?: Callback<FunderAdded>): EventEmitter;
    FunderAdded(
      options?: EventOptions,
      cb?: Callback<FunderAdded>
    ): EventEmitter;

    FunderRemoved(cb?: Callback<FunderRemoved>): EventEmitter;
    FunderRemoved(
      options?: EventOptions,
      cb?: Callback<FunderRemoved>
    ): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    LogRewardPerSecond(cb?: Callback<LogRewardPerSecond>): EventEmitter;
    LogRewardPerSecond(
      options?: EventOptions,
      cb?: Callback<LogRewardPerSecond>
    ): EventEmitter;

    LogRewardsExpiration(cb?: Callback<LogRewardsExpiration>): EventEmitter;
    LogRewardsExpiration(
      options?: EventOptions,
      cb?: Callback<LogRewardsExpiration>
    ): EventEmitter;

    Migrate(cb?: Callback<Migrate>): EventEmitter;
    Migrate(options?: EventOptions, cb?: Callback<Migrate>): EventEmitter;

    MigratorDisabled(cb?: Callback<MigratorDisabled>): EventEmitter;
    MigratorDisabled(
      options?: EventOptions,
      cb?: Callback<MigratorDisabled>
    ): EventEmitter;

    MigratorSet(cb?: Callback<MigratorSet>): EventEmitter;
    MigratorSet(
      options?: EventOptions,
      cb?: Callback<MigratorSet>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PoolAdded(cb?: Callback<PoolAdded>): EventEmitter;
    PoolAdded(options?: EventOptions, cb?: Callback<PoolAdded>): EventEmitter;

    PoolSet(cb?: Callback<PoolSet>): EventEmitter;
    PoolSet(options?: EventOptions, cb?: Callback<PoolSet>): EventEmitter;

    PoolUpdate(cb?: Callback<PoolUpdate>): EventEmitter;
    PoolUpdate(options?: EventOptions, cb?: Callback<PoolUpdate>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "FunderAdded", cb: Callback<FunderAdded>): void;
  once(
    event: "FunderAdded",
    options: EventOptions,
    cb: Callback<FunderAdded>
  ): void;

  once(event: "FunderRemoved", cb: Callback<FunderRemoved>): void;
  once(
    event: "FunderRemoved",
    options: EventOptions,
    cb: Callback<FunderRemoved>
  ): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "LogRewardPerSecond", cb: Callback<LogRewardPerSecond>): void;
  once(
    event: "LogRewardPerSecond",
    options: EventOptions,
    cb: Callback<LogRewardPerSecond>
  ): void;

  once(event: "LogRewardsExpiration", cb: Callback<LogRewardsExpiration>): void;
  once(
    event: "LogRewardsExpiration",
    options: EventOptions,
    cb: Callback<LogRewardsExpiration>
  ): void;

  once(event: "Migrate", cb: Callback<Migrate>): void;
  once(event: "Migrate", options: EventOptions, cb: Callback<Migrate>): void;

  once(event: "MigratorDisabled", cb: Callback<MigratorDisabled>): void;
  once(
    event: "MigratorDisabled",
    options: EventOptions,
    cb: Callback<MigratorDisabled>
  ): void;

  once(event: "MigratorSet", cb: Callback<MigratorSet>): void;
  once(
    event: "MigratorSet",
    options: EventOptions,
    cb: Callback<MigratorSet>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PoolAdded", cb: Callback<PoolAdded>): void;
  once(
    event: "PoolAdded",
    options: EventOptions,
    cb: Callback<PoolAdded>
  ): void;

  once(event: "PoolSet", cb: Callback<PoolSet>): void;
  once(event: "PoolSet", options: EventOptions, cb: Callback<PoolSet>): void;

  once(event: "PoolUpdate", cb: Callback<PoolUpdate>): void;
  once(
    event: "PoolUpdate",
    options: EventOptions,
    cb: Callback<PoolUpdate>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
