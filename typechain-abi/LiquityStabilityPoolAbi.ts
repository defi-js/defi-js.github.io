/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ActivePoolAddressChanged = ContractEventLog<{
  _newActivePoolAddress: string;
  0: string;
}>;
export type BorrowerOperationsAddressChanged = ContractEventLog<{
  _newBorrowerOperationsAddress: string;
  0: string;
}>;
export type CommunityIssuanceAddressChanged = ContractEventLog<{
  _newCommunityIssuanceAddress: string;
  0: string;
}>;
export type DefaultPoolAddressChanged = ContractEventLog<{
  _newDefaultPoolAddress: string;
  0: string;
}>;
export type DepositSnapshotUpdated = ContractEventLog<{
  _depositor: string;
  _P: string;
  _S: string;
  _G: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ETHGainWithdrawn = ContractEventLog<{
  _depositor: string;
  _ETH: string;
  _LUSDLoss: string;
  0: string;
  1: string;
  2: string;
}>;
export type EpochUpdated = ContractEventLog<{
  _currentEpoch: string;
  0: string;
}>;
export type EtherSent = ContractEventLog<{
  _to: string;
  _amount: string;
  0: string;
  1: string;
}>;
export type FrontEndRegistered = ContractEventLog<{
  _frontEnd: string;
  _kickbackRate: string;
  0: string;
  1: string;
}>;
export type FrontEndSnapshotUpdated = ContractEventLog<{
  _frontEnd: string;
  _P: string;
  _G: string;
  0: string;
  1: string;
  2: string;
}>;
export type FrontEndStakeChanged = ContractEventLog<{
  _frontEnd: string;
  _newFrontEndStake: string;
  _depositor: string;
  0: string;
  1: string;
  2: string;
}>;
export type FrontEndTagSet = ContractEventLog<{
  _depositor: string;
  _frontEnd: string;
  0: string;
  1: string;
}>;
export type G_Updated = ContractEventLog<{
  _G: string;
  _epoch: string;
  _scale: string;
  0: string;
  1: string;
  2: string;
}>;
export type LQTYPaidToDepositor = ContractEventLog<{
  _depositor: string;
  _LQTY: string;
  0: string;
  1: string;
}>;
export type LQTYPaidToFrontEnd = ContractEventLog<{
  _frontEnd: string;
  _LQTY: string;
  0: string;
  1: string;
}>;
export type LUSDTokenAddressChanged = ContractEventLog<{
  _newLUSDTokenAddress: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type P_Updated = ContractEventLog<{
  _P: string;
  0: string;
}>;
export type PriceFeedAddressChanged = ContractEventLog<{
  _newPriceFeedAddress: string;
  0: string;
}>;
export type S_Updated = ContractEventLog<{
  _S: string;
  _epoch: string;
  _scale: string;
  0: string;
  1: string;
  2: string;
}>;
export type ScaleUpdated = ContractEventLog<{
  _currentScale: string;
  0: string;
}>;
export type SortedTrovesAddressChanged = ContractEventLog<{
  _newSortedTrovesAddress: string;
  0: string;
}>;
export type StabilityPoolETHBalanceUpdated = ContractEventLog<{
  _newBalance: string;
  0: string;
}>;
export type StabilityPoolLUSDBalanceUpdated = ContractEventLog<{
  _newBalance: string;
  0: string;
}>;
export type TroveManagerAddressChanged = ContractEventLog<{
  _newTroveManagerAddress: string;
  0: string;
}>;
export type UserDepositChanged = ContractEventLog<{
  _depositor: string;
  _newDeposit: string;
  0: string;
  1: string;
}>;

export interface LiquityStabilityPoolAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LiquityStabilityPoolAbi;
  clone(): LiquityStabilityPoolAbi;
  methods: {
    BORROWING_FEE_FLOOR(): NonPayableTransactionObject<string>;

    CCR(): NonPayableTransactionObject<string>;

    DECIMAL_PRECISION(): NonPayableTransactionObject<string>;

    LUSD_GAS_COMPENSATION(): NonPayableTransactionObject<string>;

    MCR(): NonPayableTransactionObject<string>;

    MIN_NET_DEBT(): NonPayableTransactionObject<string>;

    NAME(): NonPayableTransactionObject<string>;

    P(): NonPayableTransactionObject<string>;

    PERCENT_DIVISOR(): NonPayableTransactionObject<string>;

    SCALE_FACTOR(): NonPayableTransactionObject<string>;

    _100pct(): NonPayableTransactionObject<string>;

    activePool(): NonPayableTransactionObject<string>;

    borrowerOperations(): NonPayableTransactionObject<string>;

    communityIssuance(): NonPayableTransactionObject<string>;

    currentEpoch(): NonPayableTransactionObject<string>;

    currentScale(): NonPayableTransactionObject<string>;

    defaultPool(): NonPayableTransactionObject<string>;

    depositSnapshots(arg0: string): NonPayableTransactionObject<{
      S: string;
      P: string;
      G: string;
      scale: string;
      epoch: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    deposits(arg0: string): NonPayableTransactionObject<{
      initialValue: string;
      frontEndTag: string;
      0: string;
      1: string;
    }>;

    epochToScaleToG(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    epochToScaleToSum(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    frontEndSnapshots(arg0: string): NonPayableTransactionObject<{
      S: string;
      P: string;
      G: string;
      scale: string;
      epoch: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    frontEndStakes(arg0: string): NonPayableTransactionObject<string>;

    frontEnds(arg0: string): NonPayableTransactionObject<{
      kickbackRate: string;
      registered: boolean;
      0: string;
      1: boolean;
    }>;

    getCompoundedFrontEndStake(
      _frontEnd: string
    ): NonPayableTransactionObject<string>;

    getCompoundedLUSDDeposit(
      _depositor: string
    ): NonPayableTransactionObject<string>;

    getDepositorETHGain(
      _depositor: string
    ): NonPayableTransactionObject<string>;

    getDepositorLQTYGain(
      _depositor: string
    ): NonPayableTransactionObject<string>;

    getETH(): NonPayableTransactionObject<string>;

    getEntireSystemColl(): NonPayableTransactionObject<string>;

    getEntireSystemDebt(): NonPayableTransactionObject<string>;

    getFrontEndLQTYGain(_frontEnd: string): NonPayableTransactionObject<string>;

    getTotalLUSDDeposits(): NonPayableTransactionObject<string>;

    isOwner(): NonPayableTransactionObject<boolean>;

    lastETHError_Offset(): NonPayableTransactionObject<string>;

    lastLQTYError(): NonPayableTransactionObject<string>;

    lastLUSDLossError_Offset(): NonPayableTransactionObject<string>;

    lusdToken(): NonPayableTransactionObject<string>;

    offset(
      _debtToOffset: number | string | BN,
      _collToAdd: number | string | BN
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    priceFeed(): NonPayableTransactionObject<string>;

    provideToSP(
      _amount: number | string | BN,
      _frontEndTag: string
    ): NonPayableTransactionObject<void>;

    registerFrontEnd(
      _kickbackRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    setAddresses(
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _lusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string
    ): NonPayableTransactionObject<void>;

    sortedTroves(): NonPayableTransactionObject<string>;

    troveManager(): NonPayableTransactionObject<string>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string
    ): NonPayableTransactionObject<void>;

    withdrawFromSP(
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ActivePoolAddressChanged(
      cb?: Callback<ActivePoolAddressChanged>
    ): EventEmitter;
    ActivePoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<ActivePoolAddressChanged>
    ): EventEmitter;

    BorrowerOperationsAddressChanged(
      cb?: Callback<BorrowerOperationsAddressChanged>
    ): EventEmitter;
    BorrowerOperationsAddressChanged(
      options?: EventOptions,
      cb?: Callback<BorrowerOperationsAddressChanged>
    ): EventEmitter;

    CommunityIssuanceAddressChanged(
      cb?: Callback<CommunityIssuanceAddressChanged>
    ): EventEmitter;
    CommunityIssuanceAddressChanged(
      options?: EventOptions,
      cb?: Callback<CommunityIssuanceAddressChanged>
    ): EventEmitter;

    DefaultPoolAddressChanged(
      cb?: Callback<DefaultPoolAddressChanged>
    ): EventEmitter;
    DefaultPoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<DefaultPoolAddressChanged>
    ): EventEmitter;

    DepositSnapshotUpdated(cb?: Callback<DepositSnapshotUpdated>): EventEmitter;
    DepositSnapshotUpdated(
      options?: EventOptions,
      cb?: Callback<DepositSnapshotUpdated>
    ): EventEmitter;

    ETHGainWithdrawn(cb?: Callback<ETHGainWithdrawn>): EventEmitter;
    ETHGainWithdrawn(
      options?: EventOptions,
      cb?: Callback<ETHGainWithdrawn>
    ): EventEmitter;

    EpochUpdated(cb?: Callback<EpochUpdated>): EventEmitter;
    EpochUpdated(
      options?: EventOptions,
      cb?: Callback<EpochUpdated>
    ): EventEmitter;

    EtherSent(cb?: Callback<EtherSent>): EventEmitter;
    EtherSent(options?: EventOptions, cb?: Callback<EtherSent>): EventEmitter;

    FrontEndRegistered(cb?: Callback<FrontEndRegistered>): EventEmitter;
    FrontEndRegistered(
      options?: EventOptions,
      cb?: Callback<FrontEndRegistered>
    ): EventEmitter;

    FrontEndSnapshotUpdated(
      cb?: Callback<FrontEndSnapshotUpdated>
    ): EventEmitter;
    FrontEndSnapshotUpdated(
      options?: EventOptions,
      cb?: Callback<FrontEndSnapshotUpdated>
    ): EventEmitter;

    FrontEndStakeChanged(cb?: Callback<FrontEndStakeChanged>): EventEmitter;
    FrontEndStakeChanged(
      options?: EventOptions,
      cb?: Callback<FrontEndStakeChanged>
    ): EventEmitter;

    FrontEndTagSet(cb?: Callback<FrontEndTagSet>): EventEmitter;
    FrontEndTagSet(
      options?: EventOptions,
      cb?: Callback<FrontEndTagSet>
    ): EventEmitter;

    G_Updated(cb?: Callback<G_Updated>): EventEmitter;
    G_Updated(options?: EventOptions, cb?: Callback<G_Updated>): EventEmitter;

    LQTYPaidToDepositor(cb?: Callback<LQTYPaidToDepositor>): EventEmitter;
    LQTYPaidToDepositor(
      options?: EventOptions,
      cb?: Callback<LQTYPaidToDepositor>
    ): EventEmitter;

    LQTYPaidToFrontEnd(cb?: Callback<LQTYPaidToFrontEnd>): EventEmitter;
    LQTYPaidToFrontEnd(
      options?: EventOptions,
      cb?: Callback<LQTYPaidToFrontEnd>
    ): EventEmitter;

    LUSDTokenAddressChanged(
      cb?: Callback<LUSDTokenAddressChanged>
    ): EventEmitter;
    LUSDTokenAddressChanged(
      options?: EventOptions,
      cb?: Callback<LUSDTokenAddressChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    P_Updated(cb?: Callback<P_Updated>): EventEmitter;
    P_Updated(options?: EventOptions, cb?: Callback<P_Updated>): EventEmitter;

    PriceFeedAddressChanged(
      cb?: Callback<PriceFeedAddressChanged>
    ): EventEmitter;
    PriceFeedAddressChanged(
      options?: EventOptions,
      cb?: Callback<PriceFeedAddressChanged>
    ): EventEmitter;

    S_Updated(cb?: Callback<S_Updated>): EventEmitter;
    S_Updated(options?: EventOptions, cb?: Callback<S_Updated>): EventEmitter;

    ScaleUpdated(cb?: Callback<ScaleUpdated>): EventEmitter;
    ScaleUpdated(
      options?: EventOptions,
      cb?: Callback<ScaleUpdated>
    ): EventEmitter;

    SortedTrovesAddressChanged(
      cb?: Callback<SortedTrovesAddressChanged>
    ): EventEmitter;
    SortedTrovesAddressChanged(
      options?: EventOptions,
      cb?: Callback<SortedTrovesAddressChanged>
    ): EventEmitter;

    StabilityPoolETHBalanceUpdated(
      cb?: Callback<StabilityPoolETHBalanceUpdated>
    ): EventEmitter;
    StabilityPoolETHBalanceUpdated(
      options?: EventOptions,
      cb?: Callback<StabilityPoolETHBalanceUpdated>
    ): EventEmitter;

    StabilityPoolLUSDBalanceUpdated(
      cb?: Callback<StabilityPoolLUSDBalanceUpdated>
    ): EventEmitter;
    StabilityPoolLUSDBalanceUpdated(
      options?: EventOptions,
      cb?: Callback<StabilityPoolLUSDBalanceUpdated>
    ): EventEmitter;

    TroveManagerAddressChanged(
      cb?: Callback<TroveManagerAddressChanged>
    ): EventEmitter;
    TroveManagerAddressChanged(
      options?: EventOptions,
      cb?: Callback<TroveManagerAddressChanged>
    ): EventEmitter;

    UserDepositChanged(cb?: Callback<UserDepositChanged>): EventEmitter;
    UserDepositChanged(
      options?: EventOptions,
      cb?: Callback<UserDepositChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ActivePoolAddressChanged",
    cb: Callback<ActivePoolAddressChanged>
  ): void;
  once(
    event: "ActivePoolAddressChanged",
    options: EventOptions,
    cb: Callback<ActivePoolAddressChanged>
  ): void;

  once(
    event: "BorrowerOperationsAddressChanged",
    cb: Callback<BorrowerOperationsAddressChanged>
  ): void;
  once(
    event: "BorrowerOperationsAddressChanged",
    options: EventOptions,
    cb: Callback<BorrowerOperationsAddressChanged>
  ): void;

  once(
    event: "CommunityIssuanceAddressChanged",
    cb: Callback<CommunityIssuanceAddressChanged>
  ): void;
  once(
    event: "CommunityIssuanceAddressChanged",
    options: EventOptions,
    cb: Callback<CommunityIssuanceAddressChanged>
  ): void;

  once(
    event: "DefaultPoolAddressChanged",
    cb: Callback<DefaultPoolAddressChanged>
  ): void;
  once(
    event: "DefaultPoolAddressChanged",
    options: EventOptions,
    cb: Callback<DefaultPoolAddressChanged>
  ): void;

  once(
    event: "DepositSnapshotUpdated",
    cb: Callback<DepositSnapshotUpdated>
  ): void;
  once(
    event: "DepositSnapshotUpdated",
    options: EventOptions,
    cb: Callback<DepositSnapshotUpdated>
  ): void;

  once(event: "ETHGainWithdrawn", cb: Callback<ETHGainWithdrawn>): void;
  once(
    event: "ETHGainWithdrawn",
    options: EventOptions,
    cb: Callback<ETHGainWithdrawn>
  ): void;

  once(event: "EpochUpdated", cb: Callback<EpochUpdated>): void;
  once(
    event: "EpochUpdated",
    options: EventOptions,
    cb: Callback<EpochUpdated>
  ): void;

  once(event: "EtherSent", cb: Callback<EtherSent>): void;
  once(
    event: "EtherSent",
    options: EventOptions,
    cb: Callback<EtherSent>
  ): void;

  once(event: "FrontEndRegistered", cb: Callback<FrontEndRegistered>): void;
  once(
    event: "FrontEndRegistered",
    options: EventOptions,
    cb: Callback<FrontEndRegistered>
  ): void;

  once(
    event: "FrontEndSnapshotUpdated",
    cb: Callback<FrontEndSnapshotUpdated>
  ): void;
  once(
    event: "FrontEndSnapshotUpdated",
    options: EventOptions,
    cb: Callback<FrontEndSnapshotUpdated>
  ): void;

  once(event: "FrontEndStakeChanged", cb: Callback<FrontEndStakeChanged>): void;
  once(
    event: "FrontEndStakeChanged",
    options: EventOptions,
    cb: Callback<FrontEndStakeChanged>
  ): void;

  once(event: "FrontEndTagSet", cb: Callback<FrontEndTagSet>): void;
  once(
    event: "FrontEndTagSet",
    options: EventOptions,
    cb: Callback<FrontEndTagSet>
  ): void;

  once(event: "G_Updated", cb: Callback<G_Updated>): void;
  once(
    event: "G_Updated",
    options: EventOptions,
    cb: Callback<G_Updated>
  ): void;

  once(event: "LQTYPaidToDepositor", cb: Callback<LQTYPaidToDepositor>): void;
  once(
    event: "LQTYPaidToDepositor",
    options: EventOptions,
    cb: Callback<LQTYPaidToDepositor>
  ): void;

  once(event: "LQTYPaidToFrontEnd", cb: Callback<LQTYPaidToFrontEnd>): void;
  once(
    event: "LQTYPaidToFrontEnd",
    options: EventOptions,
    cb: Callback<LQTYPaidToFrontEnd>
  ): void;

  once(
    event: "LUSDTokenAddressChanged",
    cb: Callback<LUSDTokenAddressChanged>
  ): void;
  once(
    event: "LUSDTokenAddressChanged",
    options: EventOptions,
    cb: Callback<LUSDTokenAddressChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "P_Updated", cb: Callback<P_Updated>): void;
  once(
    event: "P_Updated",
    options: EventOptions,
    cb: Callback<P_Updated>
  ): void;

  once(
    event: "PriceFeedAddressChanged",
    cb: Callback<PriceFeedAddressChanged>
  ): void;
  once(
    event: "PriceFeedAddressChanged",
    options: EventOptions,
    cb: Callback<PriceFeedAddressChanged>
  ): void;

  once(event: "S_Updated", cb: Callback<S_Updated>): void;
  once(
    event: "S_Updated",
    options: EventOptions,
    cb: Callback<S_Updated>
  ): void;

  once(event: "ScaleUpdated", cb: Callback<ScaleUpdated>): void;
  once(
    event: "ScaleUpdated",
    options: EventOptions,
    cb: Callback<ScaleUpdated>
  ): void;

  once(
    event: "SortedTrovesAddressChanged",
    cb: Callback<SortedTrovesAddressChanged>
  ): void;
  once(
    event: "SortedTrovesAddressChanged",
    options: EventOptions,
    cb: Callback<SortedTrovesAddressChanged>
  ): void;

  once(
    event: "StabilityPoolETHBalanceUpdated",
    cb: Callback<StabilityPoolETHBalanceUpdated>
  ): void;
  once(
    event: "StabilityPoolETHBalanceUpdated",
    options: EventOptions,
    cb: Callback<StabilityPoolETHBalanceUpdated>
  ): void;

  once(
    event: "StabilityPoolLUSDBalanceUpdated",
    cb: Callback<StabilityPoolLUSDBalanceUpdated>
  ): void;
  once(
    event: "StabilityPoolLUSDBalanceUpdated",
    options: EventOptions,
    cb: Callback<StabilityPoolLUSDBalanceUpdated>
  ): void;

  once(
    event: "TroveManagerAddressChanged",
    cb: Callback<TroveManagerAddressChanged>
  ): void;
  once(
    event: "TroveManagerAddressChanged",
    options: EventOptions,
    cb: Callback<TroveManagerAddressChanged>
  ): void;

  once(event: "UserDepositChanged", cb: Callback<UserDepositChanged>): void;
  once(
    event: "UserDepositChanged",
    options: EventOptions,
    cb: Callback<UserDepositChanged>
  ): void;
}
