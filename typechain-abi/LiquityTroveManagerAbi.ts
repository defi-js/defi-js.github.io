/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ActivePoolAddressChanged = ContractEventLog<{
  _activePoolAddress: string;
  0: string;
}>;
export type BaseRateUpdated = ContractEventLog<{
  _baseRate: string;
  0: string;
}>;
export type BorrowerOperationsAddressChanged = ContractEventLog<{
  _newBorrowerOperationsAddress: string;
  0: string;
}>;
export type CollSurplusPoolAddressChanged = ContractEventLog<{
  _collSurplusPoolAddress: string;
  0: string;
}>;
export type DefaultPoolAddressChanged = ContractEventLog<{
  _defaultPoolAddress: string;
  0: string;
}>;
export type GasPoolAddressChanged = ContractEventLog<{
  _gasPoolAddress: string;
  0: string;
}>;
export type LQTYStakingAddressChanged = ContractEventLog<{
  _lqtyStakingAddress: string;
  0: string;
}>;
export type LQTYTokenAddressChanged = ContractEventLog<{
  _lqtyTokenAddress: string;
  0: string;
}>;
export type LTermsUpdated = ContractEventLog<{
  _L_ETH: string;
  _L_LUSDDebt: string;
  0: string;
  1: string;
}>;
export type LUSDTokenAddressChanged = ContractEventLog<{
  _newLUSDTokenAddress: string;
  0: string;
}>;
export type LastFeeOpTimeUpdated = ContractEventLog<{
  _lastFeeOpTime: string;
  0: string;
}>;
export type Liquidation = ContractEventLog<{
  _liquidatedDebt: string;
  _liquidatedColl: string;
  _collGasCompensation: string;
  _LUSDGasCompensation: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PriceFeedAddressChanged = ContractEventLog<{
  _newPriceFeedAddress: string;
  0: string;
}>;
export type Redemption = ContractEventLog<{
  _attemptedLUSDAmount: string;
  _actualLUSDAmount: string;
  _ETHSent: string;
  _ETHFee: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SortedTrovesAddressChanged = ContractEventLog<{
  _sortedTrovesAddress: string;
  0: string;
}>;
export type StabilityPoolAddressChanged = ContractEventLog<{
  _stabilityPoolAddress: string;
  0: string;
}>;
export type SystemSnapshotsUpdated = ContractEventLog<{
  _totalStakesSnapshot: string;
  _totalCollateralSnapshot: string;
  0: string;
  1: string;
}>;
export type TotalStakesUpdated = ContractEventLog<{
  _newTotalStakes: string;
  0: string;
}>;
export type TroveIndexUpdated = ContractEventLog<{
  _borrower: string;
  _newIndex: string;
  0: string;
  1: string;
}>;
export type TroveLiquidated = ContractEventLog<{
  _borrower: string;
  _debt: string;
  _coll: string;
  _operation: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TroveSnapshotsUpdated = ContractEventLog<{
  _L_ETH: string;
  _L_LUSDDebt: string;
  0: string;
  1: string;
}>;
export type TroveUpdated = ContractEventLog<{
  _borrower: string;
  _debt: string;
  _coll: string;
  _stake: string;
  _operation: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface LiquityTroveManagerAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LiquityTroveManagerAbi;
  clone(): LiquityTroveManagerAbi;
  methods: {
    BETA(): NonPayableTransactionObject<string>;

    BOOTSTRAP_PERIOD(): NonPayableTransactionObject<string>;

    BORROWING_FEE_FLOOR(): NonPayableTransactionObject<string>;

    CCR(): NonPayableTransactionObject<string>;

    DECIMAL_PRECISION(): NonPayableTransactionObject<string>;

    LUSD_GAS_COMPENSATION(): NonPayableTransactionObject<string>;

    L_ETH(): NonPayableTransactionObject<string>;

    L_LUSDDebt(): NonPayableTransactionObject<string>;

    MAX_BORROWING_FEE(): NonPayableTransactionObject<string>;

    MCR(): NonPayableTransactionObject<string>;

    MINUTE_DECAY_FACTOR(): NonPayableTransactionObject<string>;

    MIN_NET_DEBT(): NonPayableTransactionObject<string>;

    NAME(): NonPayableTransactionObject<string>;

    PERCENT_DIVISOR(): NonPayableTransactionObject<string>;

    REDEMPTION_FEE_FLOOR(): NonPayableTransactionObject<string>;

    SECONDS_IN_ONE_MINUTE(): NonPayableTransactionObject<string>;

    TroveOwners(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    Troves(arg0: string): NonPayableTransactionObject<{
      debt: string;
      coll: string;
      stake: string;
      status: string;
      arrayIndex: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    _100pct(): NonPayableTransactionObject<string>;

    activePool(): NonPayableTransactionObject<string>;

    addTroveOwnerToArray(
      _borrower: string
    ): NonPayableTransactionObject<string>;

    applyPendingRewards(_borrower: string): NonPayableTransactionObject<void>;

    baseRate(): NonPayableTransactionObject<string>;

    batchLiquidateTroves(
      _troveArray: string[]
    ): NonPayableTransactionObject<void>;

    borrowerOperationsAddress(): NonPayableTransactionObject<string>;

    checkRecoveryMode(
      _price: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    closeTrove(_borrower: string): NonPayableTransactionObject<void>;

    decayBaseRateFromBorrowing(): NonPayableTransactionObject<void>;

    decreaseTroveColl(
      _borrower: string,
      _collDecrease: number | string | BN
    ): NonPayableTransactionObject<string>;

    decreaseTroveDebt(
      _borrower: string,
      _debtDecrease: number | string | BN
    ): NonPayableTransactionObject<string>;

    defaultPool(): NonPayableTransactionObject<string>;

    getBorrowingFee(
      _LUSDDebt: number | string | BN
    ): NonPayableTransactionObject<string>;

    getBorrowingFeeWithDecay(
      _LUSDDebt: number | string | BN
    ): NonPayableTransactionObject<string>;

    getBorrowingRate(): NonPayableTransactionObject<string>;

    getBorrowingRateWithDecay(): NonPayableTransactionObject<string>;

    getCurrentICR(
      _borrower: string,
      _price: number | string | BN
    ): NonPayableTransactionObject<string>;

    getEntireDebtAndColl(_borrower: string): NonPayableTransactionObject<{
      debt: string;
      coll: string;
      pendingLUSDDebtReward: string;
      pendingETHReward: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    getEntireSystemColl(): NonPayableTransactionObject<string>;

    getEntireSystemDebt(): NonPayableTransactionObject<string>;

    getNominalICR(_borrower: string): NonPayableTransactionObject<string>;

    getPendingETHReward(_borrower: string): NonPayableTransactionObject<string>;

    getPendingLUSDDebtReward(
      _borrower: string
    ): NonPayableTransactionObject<string>;

    getRedemptionFeeWithDecay(
      _ETHDrawn: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRedemptionRate(): NonPayableTransactionObject<string>;

    getRedemptionRateWithDecay(): NonPayableTransactionObject<string>;

    getTCR(_price: number | string | BN): NonPayableTransactionObject<string>;

    getTroveColl(_borrower: string): NonPayableTransactionObject<string>;

    getTroveDebt(_borrower: string): NonPayableTransactionObject<string>;

    getTroveFromTroveOwnersArray(
      _index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTroveOwnersCount(): NonPayableTransactionObject<string>;

    getTroveStake(_borrower: string): NonPayableTransactionObject<string>;

    getTroveStatus(_borrower: string): NonPayableTransactionObject<string>;

    hasPendingRewards(_borrower: string): NonPayableTransactionObject<boolean>;

    increaseTroveColl(
      _borrower: string,
      _collIncrease: number | string | BN
    ): NonPayableTransactionObject<string>;

    increaseTroveDebt(
      _borrower: string,
      _debtIncrease: number | string | BN
    ): NonPayableTransactionObject<string>;

    isOwner(): NonPayableTransactionObject<boolean>;

    lastETHError_Redistribution(): NonPayableTransactionObject<string>;

    lastFeeOperationTime(): NonPayableTransactionObject<string>;

    lastLUSDDebtError_Redistribution(): NonPayableTransactionObject<string>;

    liquidate(_borrower: string): NonPayableTransactionObject<void>;

    liquidateTroves(
      _n: number | string | BN
    ): NonPayableTransactionObject<void>;

    lqtyStaking(): NonPayableTransactionObject<string>;

    lqtyToken(): NonPayableTransactionObject<string>;

    lusdToken(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    priceFeed(): NonPayableTransactionObject<string>;

    redeemCollateral(
      _LUSDamount: number | string | BN,
      _firstRedemptionHint: string,
      _upperPartialRedemptionHint: string,
      _lowerPartialRedemptionHint: string,
      _partialRedemptionHintNICR: number | string | BN,
      _maxIterations: number | string | BN,
      _maxFeePercentage: number | string | BN
    ): NonPayableTransactionObject<void>;

    removeStake(_borrower: string): NonPayableTransactionObject<void>;

    rewardSnapshots(arg0: string): NonPayableTransactionObject<{
      ETH: string;
      LUSDDebt: string;
      0: string;
      1: string;
    }>;

    setAddresses(
      _borrowerOperationsAddress: string,
      _activePoolAddress: string,
      _defaultPoolAddress: string,
      _stabilityPoolAddress: string,
      _gasPoolAddress: string,
      _collSurplusPoolAddress: string,
      _priceFeedAddress: string,
      _lusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _lqtyTokenAddress: string,
      _lqtyStakingAddress: string
    ): NonPayableTransactionObject<void>;

    setTroveStatus(
      _borrower: string,
      _num: number | string | BN
    ): NonPayableTransactionObject<void>;

    sortedTroves(): NonPayableTransactionObject<string>;

    stabilityPool(): NonPayableTransactionObject<string>;

    totalCollateralSnapshot(): NonPayableTransactionObject<string>;

    totalStakes(): NonPayableTransactionObject<string>;

    totalStakesSnapshot(): NonPayableTransactionObject<string>;

    updateStakeAndTotalStakes(
      _borrower: string
    ): NonPayableTransactionObject<string>;

    updateTroveRewardSnapshots(
      _borrower: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ActivePoolAddressChanged(
      cb?: Callback<ActivePoolAddressChanged>
    ): EventEmitter;
    ActivePoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<ActivePoolAddressChanged>
    ): EventEmitter;

    BaseRateUpdated(cb?: Callback<BaseRateUpdated>): EventEmitter;
    BaseRateUpdated(
      options?: EventOptions,
      cb?: Callback<BaseRateUpdated>
    ): EventEmitter;

    BorrowerOperationsAddressChanged(
      cb?: Callback<BorrowerOperationsAddressChanged>
    ): EventEmitter;
    BorrowerOperationsAddressChanged(
      options?: EventOptions,
      cb?: Callback<BorrowerOperationsAddressChanged>
    ): EventEmitter;

    CollSurplusPoolAddressChanged(
      cb?: Callback<CollSurplusPoolAddressChanged>
    ): EventEmitter;
    CollSurplusPoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<CollSurplusPoolAddressChanged>
    ): EventEmitter;

    DefaultPoolAddressChanged(
      cb?: Callback<DefaultPoolAddressChanged>
    ): EventEmitter;
    DefaultPoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<DefaultPoolAddressChanged>
    ): EventEmitter;

    GasPoolAddressChanged(cb?: Callback<GasPoolAddressChanged>): EventEmitter;
    GasPoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<GasPoolAddressChanged>
    ): EventEmitter;

    LQTYStakingAddressChanged(
      cb?: Callback<LQTYStakingAddressChanged>
    ): EventEmitter;
    LQTYStakingAddressChanged(
      options?: EventOptions,
      cb?: Callback<LQTYStakingAddressChanged>
    ): EventEmitter;

    LQTYTokenAddressChanged(
      cb?: Callback<LQTYTokenAddressChanged>
    ): EventEmitter;
    LQTYTokenAddressChanged(
      options?: EventOptions,
      cb?: Callback<LQTYTokenAddressChanged>
    ): EventEmitter;

    LTermsUpdated(cb?: Callback<LTermsUpdated>): EventEmitter;
    LTermsUpdated(
      options?: EventOptions,
      cb?: Callback<LTermsUpdated>
    ): EventEmitter;

    LUSDTokenAddressChanged(
      cb?: Callback<LUSDTokenAddressChanged>
    ): EventEmitter;
    LUSDTokenAddressChanged(
      options?: EventOptions,
      cb?: Callback<LUSDTokenAddressChanged>
    ): EventEmitter;

    LastFeeOpTimeUpdated(cb?: Callback<LastFeeOpTimeUpdated>): EventEmitter;
    LastFeeOpTimeUpdated(
      options?: EventOptions,
      cb?: Callback<LastFeeOpTimeUpdated>
    ): EventEmitter;

    Liquidation(cb?: Callback<Liquidation>): EventEmitter;
    Liquidation(
      options?: EventOptions,
      cb?: Callback<Liquidation>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PriceFeedAddressChanged(
      cb?: Callback<PriceFeedAddressChanged>
    ): EventEmitter;
    PriceFeedAddressChanged(
      options?: EventOptions,
      cb?: Callback<PriceFeedAddressChanged>
    ): EventEmitter;

    Redemption(cb?: Callback<Redemption>): EventEmitter;
    Redemption(options?: EventOptions, cb?: Callback<Redemption>): EventEmitter;

    SortedTrovesAddressChanged(
      cb?: Callback<SortedTrovesAddressChanged>
    ): EventEmitter;
    SortedTrovesAddressChanged(
      options?: EventOptions,
      cb?: Callback<SortedTrovesAddressChanged>
    ): EventEmitter;

    StabilityPoolAddressChanged(
      cb?: Callback<StabilityPoolAddressChanged>
    ): EventEmitter;
    StabilityPoolAddressChanged(
      options?: EventOptions,
      cb?: Callback<StabilityPoolAddressChanged>
    ): EventEmitter;

    SystemSnapshotsUpdated(cb?: Callback<SystemSnapshotsUpdated>): EventEmitter;
    SystemSnapshotsUpdated(
      options?: EventOptions,
      cb?: Callback<SystemSnapshotsUpdated>
    ): EventEmitter;

    TotalStakesUpdated(cb?: Callback<TotalStakesUpdated>): EventEmitter;
    TotalStakesUpdated(
      options?: EventOptions,
      cb?: Callback<TotalStakesUpdated>
    ): EventEmitter;

    TroveIndexUpdated(cb?: Callback<TroveIndexUpdated>): EventEmitter;
    TroveIndexUpdated(
      options?: EventOptions,
      cb?: Callback<TroveIndexUpdated>
    ): EventEmitter;

    TroveLiquidated(cb?: Callback<TroveLiquidated>): EventEmitter;
    TroveLiquidated(
      options?: EventOptions,
      cb?: Callback<TroveLiquidated>
    ): EventEmitter;

    TroveSnapshotsUpdated(cb?: Callback<TroveSnapshotsUpdated>): EventEmitter;
    TroveSnapshotsUpdated(
      options?: EventOptions,
      cb?: Callback<TroveSnapshotsUpdated>
    ): EventEmitter;

    TroveUpdated(cb?: Callback<TroveUpdated>): EventEmitter;
    TroveUpdated(
      options?: EventOptions,
      cb?: Callback<TroveUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ActivePoolAddressChanged",
    cb: Callback<ActivePoolAddressChanged>
  ): void;
  once(
    event: "ActivePoolAddressChanged",
    options: EventOptions,
    cb: Callback<ActivePoolAddressChanged>
  ): void;

  once(event: "BaseRateUpdated", cb: Callback<BaseRateUpdated>): void;
  once(
    event: "BaseRateUpdated",
    options: EventOptions,
    cb: Callback<BaseRateUpdated>
  ): void;

  once(
    event: "BorrowerOperationsAddressChanged",
    cb: Callback<BorrowerOperationsAddressChanged>
  ): void;
  once(
    event: "BorrowerOperationsAddressChanged",
    options: EventOptions,
    cb: Callback<BorrowerOperationsAddressChanged>
  ): void;

  once(
    event: "CollSurplusPoolAddressChanged",
    cb: Callback<CollSurplusPoolAddressChanged>
  ): void;
  once(
    event: "CollSurplusPoolAddressChanged",
    options: EventOptions,
    cb: Callback<CollSurplusPoolAddressChanged>
  ): void;

  once(
    event: "DefaultPoolAddressChanged",
    cb: Callback<DefaultPoolAddressChanged>
  ): void;
  once(
    event: "DefaultPoolAddressChanged",
    options: EventOptions,
    cb: Callback<DefaultPoolAddressChanged>
  ): void;

  once(
    event: "GasPoolAddressChanged",
    cb: Callback<GasPoolAddressChanged>
  ): void;
  once(
    event: "GasPoolAddressChanged",
    options: EventOptions,
    cb: Callback<GasPoolAddressChanged>
  ): void;

  once(
    event: "LQTYStakingAddressChanged",
    cb: Callback<LQTYStakingAddressChanged>
  ): void;
  once(
    event: "LQTYStakingAddressChanged",
    options: EventOptions,
    cb: Callback<LQTYStakingAddressChanged>
  ): void;

  once(
    event: "LQTYTokenAddressChanged",
    cb: Callback<LQTYTokenAddressChanged>
  ): void;
  once(
    event: "LQTYTokenAddressChanged",
    options: EventOptions,
    cb: Callback<LQTYTokenAddressChanged>
  ): void;

  once(event: "LTermsUpdated", cb: Callback<LTermsUpdated>): void;
  once(
    event: "LTermsUpdated",
    options: EventOptions,
    cb: Callback<LTermsUpdated>
  ): void;

  once(
    event: "LUSDTokenAddressChanged",
    cb: Callback<LUSDTokenAddressChanged>
  ): void;
  once(
    event: "LUSDTokenAddressChanged",
    options: EventOptions,
    cb: Callback<LUSDTokenAddressChanged>
  ): void;

  once(event: "LastFeeOpTimeUpdated", cb: Callback<LastFeeOpTimeUpdated>): void;
  once(
    event: "LastFeeOpTimeUpdated",
    options: EventOptions,
    cb: Callback<LastFeeOpTimeUpdated>
  ): void;

  once(event: "Liquidation", cb: Callback<Liquidation>): void;
  once(
    event: "Liquidation",
    options: EventOptions,
    cb: Callback<Liquidation>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "PriceFeedAddressChanged",
    cb: Callback<PriceFeedAddressChanged>
  ): void;
  once(
    event: "PriceFeedAddressChanged",
    options: EventOptions,
    cb: Callback<PriceFeedAddressChanged>
  ): void;

  once(event: "Redemption", cb: Callback<Redemption>): void;
  once(
    event: "Redemption",
    options: EventOptions,
    cb: Callback<Redemption>
  ): void;

  once(
    event: "SortedTrovesAddressChanged",
    cb: Callback<SortedTrovesAddressChanged>
  ): void;
  once(
    event: "SortedTrovesAddressChanged",
    options: EventOptions,
    cb: Callback<SortedTrovesAddressChanged>
  ): void;

  once(
    event: "StabilityPoolAddressChanged",
    cb: Callback<StabilityPoolAddressChanged>
  ): void;
  once(
    event: "StabilityPoolAddressChanged",
    options: EventOptions,
    cb: Callback<StabilityPoolAddressChanged>
  ): void;

  once(
    event: "SystemSnapshotsUpdated",
    cb: Callback<SystemSnapshotsUpdated>
  ): void;
  once(
    event: "SystemSnapshotsUpdated",
    options: EventOptions,
    cb: Callback<SystemSnapshotsUpdated>
  ): void;

  once(event: "TotalStakesUpdated", cb: Callback<TotalStakesUpdated>): void;
  once(
    event: "TotalStakesUpdated",
    options: EventOptions,
    cb: Callback<TotalStakesUpdated>
  ): void;

  once(event: "TroveIndexUpdated", cb: Callback<TroveIndexUpdated>): void;
  once(
    event: "TroveIndexUpdated",
    options: EventOptions,
    cb: Callback<TroveIndexUpdated>
  ): void;

  once(event: "TroveLiquidated", cb: Callback<TroveLiquidated>): void;
  once(
    event: "TroveLiquidated",
    options: EventOptions,
    cb: Callback<TroveLiquidated>
  ): void;

  once(
    event: "TroveSnapshotsUpdated",
    cb: Callback<TroveSnapshotsUpdated>
  ): void;
  once(
    event: "TroveSnapshotsUpdated",
    options: EventOptions,
    cb: Callback<TroveSnapshotsUpdated>
  ): void;

  once(event: "TroveUpdated", cb: Callback<TroveUpdated>): void;
  once(
    event: "TroveUpdated",
    options: EventOptions,
    cb: Callback<TroveUpdated>
  ): void;
}
